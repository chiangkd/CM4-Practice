
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ddc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001014  08001014  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001014  08001014  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001014  08001014  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001018  08001018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800101c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000040  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000392  00000000  00000000  00020b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00020eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000118  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c3b  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001408  00000000  00000000  00023d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000951f  00000000  00000000  0002515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e67a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ae0  00000000  00000000  0002e6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f58 	.word	0x08000f58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08000f58 	.word	0x08000f58

080001d4 <main>:
// global variable to store different task handler's address
uint32_t task_handlers[MAX_TASKS];


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <main+0x30>)
 80001da:	f000 f877 	bl	80002cc <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001de:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <main+0x34>)
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <main+0x38>)
 80001e2:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001e4:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <main+0x3c>)
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <main+0x38>)
 80001e8:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001ea:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <main+0x40>)
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <main+0x38>)
 80001ee:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x44>)
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <main+0x38>)
 80001f4:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001f6:	f000 f86f 	bl	80002d8 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 80001fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fe:	f000 f82d 	bl	800025c <init_systick_timer>
	for(;;);
 8000202:	e7fe      	b.n	8000202 <main+0x2e>
 8000204:	2001f000 	.word	0x2001f000
 8000208:	0800021d 	.word	0x0800021d
 800020c:	20000090 	.word	0x20000090
 8000210:	0800022d 	.word	0x0800022d
 8000214:	0800023d 	.word	0x0800023d
 8000218:	0800024d 	.word	0x0800024d

0800021c <task1_handler>:
}

void task1_handler(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task1\n");
 8000220:	4801      	ldr	r0, [pc, #4]	; (8000228 <task1_handler+0xc>)
 8000222:	f000 fa0f 	bl	8000644 <puts>
 8000226:	e7fb      	b.n	8000220 <task1_handler+0x4>
 8000228:	08000f70 	.word	0x08000f70

0800022c <task2_handler>:
	}
}
void task2_handler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task2\n");
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <task2_handler+0xc>)
 8000232:	f000 fa07 	bl	8000644 <puts>
 8000236:	e7fb      	b.n	8000230 <task2_handler+0x4>
 8000238:	08000f80 	.word	0x08000f80

0800023c <task3_handler>:
	}
}
void task3_handler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task3\n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task3_handler+0xc>)
 8000242:	f000 f9ff 	bl	8000644 <puts>
 8000246:	e7fb      	b.n	8000240 <task3_handler+0x4>
 8000248:	08000f90 	.word	0x08000f90

0800024c <task4_handler>:
	}
}
void task4_handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task4\n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task4_handler+0xc>)
 8000252:	f000 f9f7 	bl	8000644 <puts>
 8000256:	e7fb      	b.n	8000250 <task4_handler+0x4>
 8000258:	08000fa0 	.word	0x08000fa0

0800025c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 800025c:	b480      	push	{r7}
 800025e:	b087      	sub	sp, #28
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <init_systick_timer+0x64>)
 8000266:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <init_systick_timer+0x68>)
 800026a:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <init_systick_timer+0x6c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	fbb2 f3f3 	udiv	r3, r2, r3
 8000274:	3b01      	subs	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	601a      	str	r2, [r3, #0]

	// load the value in to SVR
	*pSRVR |= count_value;
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	431a      	orrs	r2, r3
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f043 0202 	orr.w	r2, r3, #2
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f043 0204 	orr.w	r2, r3, #4
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	601a      	str	r2, [r3, #0]

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f043 0201 	orr.w	r2, r3, #1
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	371c      	adds	r7, #28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e014 	.word	0xe000e014
 80002c4:	e000e010 	.word	0xe000e010
 80002c8:	007a1200 	.word	0x007a1200

080002cc <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80002cc:	4603      	mov	r3, r0
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
 80002ce:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");	// go back to main function
 80002d2:	4770      	bx	lr
}
 80002d4:	bf00      	nop
	...

080002d8 <init_tasks_stack>:



void init_tasks_stack(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	e032      	b.n	800034a <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <init_tasks_stack+0x84>)
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	60fb      	str	r3, [r7, #12]

		/* fully descending */
		pPSP--;	// xPSR
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3b04      	subs	r3, #4
 80002f2:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;	// 0x00100000
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002fa:	601a      	str	r2, [r3, #0]

		pPSP--;	// PC
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3b04      	subs	r3, #4
 8000300:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <init_tasks_stack+0x88>)
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	601a      	str	r2, [r3, #0]

		pPSP--;	// LR
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3b04      	subs	r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f06f 0202 	mvn.w	r2, #2
 800031a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++){
 800031c:	2300      	movs	r3, #0
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	e008      	b.n	8000334 <init_tasks_stack+0x5c>
			pPSP--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
			*pPSP = 0; // from R12 to R4
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3301      	adds	r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b0c      	cmp	r3, #12
 8000338:	ddf3      	ble.n	8000322 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP; // preserve the PSP value, very important
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	4907      	ldr	r1, [pc, #28]	; (800035c <init_tasks_stack+0x84>)
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	3301      	adds	r3, #1
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	2b03      	cmp	r3, #3
 800034e:	ddc9      	ble.n	80002e4 <init_tasks_stack+0xc>
	}
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000000 	.word	0x20000000
 8000360:	20000090 	.word	0x20000090

08000364 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	e00a      	b.n	8000398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000382:	f3af 8000 	nop.w
 8000386:	4601      	mov	r1, r0
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	60ba      	str	r2, [r7, #8]
 800038e:	b2ca      	uxtb	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	3301      	adds	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	429a      	cmp	r2, r3
 800039e:	dbf0      	blt.n	8000382 <_read+0x12>
	}

return len;
 80003a0:	687b      	ldr	r3, [r7, #4]
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3718      	adds	r7, #24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b086      	sub	sp, #24
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	60f8      	str	r0, [r7, #12]
 80003b2:	60b9      	str	r1, [r7, #8]
 80003b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
 80003ba:	e009      	b.n	80003d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	60ba      	str	r2, [r7, #8]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	3301      	adds	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	dbf1      	blt.n	80003bc <_write+0x12>
	}
	return len;
 80003d8:	687b      	ldr	r3, [r7, #4]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_close>:

int _close(int file)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
	return -1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000408:	605a      	str	r2, [r3, #4]
	return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <_isatty>:

int _isatty(int file)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	return 1;
 800041e:	2301      	movs	r3, #1
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
	return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f846 	bl	8000504 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20010000 	.word	0x20010000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	200000a0 	.word	0x200000a0
 80004ac:	200000b8 	.word	0x200000b8

080004b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004de:	f000 f817 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff fe77 	bl	80001d4 <main>

080004e6 <LoopForever>:

LoopForever:
    b LoopForever
 80004e6:	e7fe      	b.n	80004e6 <LoopForever>
  ldr   r0, =_estack
 80004e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80004f4:	0800101c 	.word	0x0800101c
  ldr r2, =_sbss
 80004f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80004fc:	200000b4 	.word	0x200000b4

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <__errno>:
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <__errno+0x8>)
 8000506:	6818      	ldr	r0, [r3, #0]
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000010 	.word	0x20000010

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	4d0d      	ldr	r5, [pc, #52]	; (8000548 <__libc_init_array+0x38>)
 8000514:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	2600      	movs	r6, #0
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	4d0b      	ldr	r5, [pc, #44]	; (8000550 <__libc_init_array+0x40>)
 8000522:	4c0c      	ldr	r4, [pc, #48]	; (8000554 <__libc_init_array+0x44>)
 8000524:	f000 fd18 	bl	8000f58 <_init>
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	2600      	movs	r6, #0
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08001014 	.word	0x08001014
 800054c:	08001014 	.word	0x08001014
 8000550:	08001014 	.word	0x08001014
 8000554:	08001018 	.word	0x08001018

08000558 <memset>:
 8000558:	4402      	add	r2, r0
 800055a:	4603      	mov	r3, r0
 800055c:	4293      	cmp	r3, r2
 800055e:	d100      	bne.n	8000562 <memset+0xa>
 8000560:	4770      	bx	lr
 8000562:	f803 1b01 	strb.w	r1, [r3], #1
 8000566:	e7f9      	b.n	800055c <memset+0x4>

08000568 <_puts_r>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	460e      	mov	r6, r1
 800056c:	4605      	mov	r5, r0
 800056e:	b118      	cbz	r0, 8000578 <_puts_r+0x10>
 8000570:	6983      	ldr	r3, [r0, #24]
 8000572:	b90b      	cbnz	r3, 8000578 <_puts_r+0x10>
 8000574:	f000 fa44 	bl	8000a00 <__sinit>
 8000578:	69ab      	ldr	r3, [r5, #24]
 800057a:	68ac      	ldr	r4, [r5, #8]
 800057c:	b913      	cbnz	r3, 8000584 <_puts_r+0x1c>
 800057e:	4628      	mov	r0, r5
 8000580:	f000 fa3e 	bl	8000a00 <__sinit>
 8000584:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <_puts_r+0xd0>)
 8000586:	429c      	cmp	r4, r3
 8000588:	d120      	bne.n	80005cc <_puts_r+0x64>
 800058a:	686c      	ldr	r4, [r5, #4]
 800058c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800058e:	07db      	lsls	r3, r3, #31
 8000590:	d405      	bmi.n	800059e <_puts_r+0x36>
 8000592:	89a3      	ldrh	r3, [r4, #12]
 8000594:	0598      	lsls	r0, r3, #22
 8000596:	d402      	bmi.n	800059e <_puts_r+0x36>
 8000598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800059a:	f000 facf 	bl	8000b3c <__retarget_lock_acquire_recursive>
 800059e:	89a3      	ldrh	r3, [r4, #12]
 80005a0:	0719      	lsls	r1, r3, #28
 80005a2:	d51d      	bpl.n	80005e0 <_puts_r+0x78>
 80005a4:	6923      	ldr	r3, [r4, #16]
 80005a6:	b1db      	cbz	r3, 80005e0 <_puts_r+0x78>
 80005a8:	3e01      	subs	r6, #1
 80005aa:	68a3      	ldr	r3, [r4, #8]
 80005ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005b0:	3b01      	subs	r3, #1
 80005b2:	60a3      	str	r3, [r4, #8]
 80005b4:	bb39      	cbnz	r1, 8000606 <_puts_r+0x9e>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	da38      	bge.n	800062c <_puts_r+0xc4>
 80005ba:	4622      	mov	r2, r4
 80005bc:	210a      	movs	r1, #10
 80005be:	4628      	mov	r0, r5
 80005c0:	f000 f848 	bl	8000654 <__swbuf_r>
 80005c4:	3001      	adds	r0, #1
 80005c6:	d011      	beq.n	80005ec <_puts_r+0x84>
 80005c8:	250a      	movs	r5, #10
 80005ca:	e011      	b.n	80005f0 <_puts_r+0x88>
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <_puts_r+0xd4>)
 80005ce:	429c      	cmp	r4, r3
 80005d0:	d101      	bne.n	80005d6 <_puts_r+0x6e>
 80005d2:	68ac      	ldr	r4, [r5, #8]
 80005d4:	e7da      	b.n	800058c <_puts_r+0x24>
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <_puts_r+0xd8>)
 80005d8:	429c      	cmp	r4, r3
 80005da:	bf08      	it	eq
 80005dc:	68ec      	ldreq	r4, [r5, #12]
 80005de:	e7d5      	b.n	800058c <_puts_r+0x24>
 80005e0:	4621      	mov	r1, r4
 80005e2:	4628      	mov	r0, r5
 80005e4:	f000 f888 	bl	80006f8 <__swsetup_r>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d0dd      	beq.n	80005a8 <_puts_r+0x40>
 80005ec:	f04f 35ff 	mov.w	r5, #4294967295
 80005f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005f2:	07da      	lsls	r2, r3, #31
 80005f4:	d405      	bmi.n	8000602 <_puts_r+0x9a>
 80005f6:	89a3      	ldrh	r3, [r4, #12]
 80005f8:	059b      	lsls	r3, r3, #22
 80005fa:	d402      	bmi.n	8000602 <_puts_r+0x9a>
 80005fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005fe:	f000 fa9e 	bl	8000b3e <__retarget_lock_release_recursive>
 8000602:	4628      	mov	r0, r5
 8000604:	bd70      	pop	{r4, r5, r6, pc}
 8000606:	2b00      	cmp	r3, #0
 8000608:	da04      	bge.n	8000614 <_puts_r+0xac>
 800060a:	69a2      	ldr	r2, [r4, #24]
 800060c:	429a      	cmp	r2, r3
 800060e:	dc06      	bgt.n	800061e <_puts_r+0xb6>
 8000610:	290a      	cmp	r1, #10
 8000612:	d004      	beq.n	800061e <_puts_r+0xb6>
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	6022      	str	r2, [r4, #0]
 800061a:	7019      	strb	r1, [r3, #0]
 800061c:	e7c5      	b.n	80005aa <_puts_r+0x42>
 800061e:	4622      	mov	r2, r4
 8000620:	4628      	mov	r0, r5
 8000622:	f000 f817 	bl	8000654 <__swbuf_r>
 8000626:	3001      	adds	r0, #1
 8000628:	d1bf      	bne.n	80005aa <_puts_r+0x42>
 800062a:	e7df      	b.n	80005ec <_puts_r+0x84>
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	250a      	movs	r5, #10
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	6022      	str	r2, [r4, #0]
 8000634:	701d      	strb	r5, [r3, #0]
 8000636:	e7db      	b.n	80005f0 <_puts_r+0x88>
 8000638:	08000fd4 	.word	0x08000fd4
 800063c:	08000ff4 	.word	0x08000ff4
 8000640:	08000fb4 	.word	0x08000fb4

08000644 <puts>:
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <puts+0xc>)
 8000646:	4601      	mov	r1, r0
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f7ff bf8d 	b.w	8000568 <_puts_r>
 800064e:	bf00      	nop
 8000650:	20000010 	.word	0x20000010

08000654 <__swbuf_r>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	460e      	mov	r6, r1
 8000658:	4614      	mov	r4, r2
 800065a:	4605      	mov	r5, r0
 800065c:	b118      	cbz	r0, 8000666 <__swbuf_r+0x12>
 800065e:	6983      	ldr	r3, [r0, #24]
 8000660:	b90b      	cbnz	r3, 8000666 <__swbuf_r+0x12>
 8000662:	f000 f9cd 	bl	8000a00 <__sinit>
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <__swbuf_r+0x98>)
 8000668:	429c      	cmp	r4, r3
 800066a:	d12b      	bne.n	80006c4 <__swbuf_r+0x70>
 800066c:	686c      	ldr	r4, [r5, #4]
 800066e:	69a3      	ldr	r3, [r4, #24]
 8000670:	60a3      	str	r3, [r4, #8]
 8000672:	89a3      	ldrh	r3, [r4, #12]
 8000674:	071a      	lsls	r2, r3, #28
 8000676:	d52f      	bpl.n	80006d8 <__swbuf_r+0x84>
 8000678:	6923      	ldr	r3, [r4, #16]
 800067a:	b36b      	cbz	r3, 80006d8 <__swbuf_r+0x84>
 800067c:	6923      	ldr	r3, [r4, #16]
 800067e:	6820      	ldr	r0, [r4, #0]
 8000680:	1ac0      	subs	r0, r0, r3
 8000682:	6963      	ldr	r3, [r4, #20]
 8000684:	b2f6      	uxtb	r6, r6
 8000686:	4283      	cmp	r3, r0
 8000688:	4637      	mov	r7, r6
 800068a:	dc04      	bgt.n	8000696 <__swbuf_r+0x42>
 800068c:	4621      	mov	r1, r4
 800068e:	4628      	mov	r0, r5
 8000690:	f000 f922 	bl	80008d8 <_fflush_r>
 8000694:	bb30      	cbnz	r0, 80006e4 <__swbuf_r+0x90>
 8000696:	68a3      	ldr	r3, [r4, #8]
 8000698:	3b01      	subs	r3, #1
 800069a:	60a3      	str	r3, [r4, #8]
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	6022      	str	r2, [r4, #0]
 80006a2:	701e      	strb	r6, [r3, #0]
 80006a4:	6963      	ldr	r3, [r4, #20]
 80006a6:	3001      	adds	r0, #1
 80006a8:	4283      	cmp	r3, r0
 80006aa:	d004      	beq.n	80006b6 <__swbuf_r+0x62>
 80006ac:	89a3      	ldrh	r3, [r4, #12]
 80006ae:	07db      	lsls	r3, r3, #31
 80006b0:	d506      	bpl.n	80006c0 <__swbuf_r+0x6c>
 80006b2:	2e0a      	cmp	r6, #10
 80006b4:	d104      	bne.n	80006c0 <__swbuf_r+0x6c>
 80006b6:	4621      	mov	r1, r4
 80006b8:	4628      	mov	r0, r5
 80006ba:	f000 f90d 	bl	80008d8 <_fflush_r>
 80006be:	b988      	cbnz	r0, 80006e4 <__swbuf_r+0x90>
 80006c0:	4638      	mov	r0, r7
 80006c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <__swbuf_r+0x9c>)
 80006c6:	429c      	cmp	r4, r3
 80006c8:	d101      	bne.n	80006ce <__swbuf_r+0x7a>
 80006ca:	68ac      	ldr	r4, [r5, #8]
 80006cc:	e7cf      	b.n	800066e <__swbuf_r+0x1a>
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <__swbuf_r+0xa0>)
 80006d0:	429c      	cmp	r4, r3
 80006d2:	bf08      	it	eq
 80006d4:	68ec      	ldreq	r4, [r5, #12]
 80006d6:	e7ca      	b.n	800066e <__swbuf_r+0x1a>
 80006d8:	4621      	mov	r1, r4
 80006da:	4628      	mov	r0, r5
 80006dc:	f000 f80c 	bl	80006f8 <__swsetup_r>
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d0cb      	beq.n	800067c <__swbuf_r+0x28>
 80006e4:	f04f 37ff 	mov.w	r7, #4294967295
 80006e8:	e7ea      	b.n	80006c0 <__swbuf_r+0x6c>
 80006ea:	bf00      	nop
 80006ec:	08000fd4 	.word	0x08000fd4
 80006f0:	08000ff4 	.word	0x08000ff4
 80006f4:	08000fb4 	.word	0x08000fb4

080006f8 <__swsetup_r>:
 80006f8:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <__swsetup_r+0xcc>)
 80006fa:	b570      	push	{r4, r5, r6, lr}
 80006fc:	681d      	ldr	r5, [r3, #0]
 80006fe:	4606      	mov	r6, r0
 8000700:	460c      	mov	r4, r1
 8000702:	b125      	cbz	r5, 800070e <__swsetup_r+0x16>
 8000704:	69ab      	ldr	r3, [r5, #24]
 8000706:	b913      	cbnz	r3, 800070e <__swsetup_r+0x16>
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f979 	bl	8000a00 <__sinit>
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <__swsetup_r+0xd0>)
 8000710:	429c      	cmp	r4, r3
 8000712:	d10f      	bne.n	8000734 <__swsetup_r+0x3c>
 8000714:	686c      	ldr	r4, [r5, #4]
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800071c:	0719      	lsls	r1, r3, #28
 800071e:	d42c      	bmi.n	800077a <__swsetup_r+0x82>
 8000720:	06dd      	lsls	r5, r3, #27
 8000722:	d411      	bmi.n	8000748 <__swsetup_r+0x50>
 8000724:	2309      	movs	r3, #9
 8000726:	6033      	str	r3, [r6, #0]
 8000728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800072c:	81a3      	strh	r3, [r4, #12]
 800072e:	f04f 30ff 	mov.w	r0, #4294967295
 8000732:	e03e      	b.n	80007b2 <__swsetup_r+0xba>
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <__swsetup_r+0xd4>)
 8000736:	429c      	cmp	r4, r3
 8000738:	d101      	bne.n	800073e <__swsetup_r+0x46>
 800073a:	68ac      	ldr	r4, [r5, #8]
 800073c:	e7eb      	b.n	8000716 <__swsetup_r+0x1e>
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <__swsetup_r+0xd8>)
 8000740:	429c      	cmp	r4, r3
 8000742:	bf08      	it	eq
 8000744:	68ec      	ldreq	r4, [r5, #12]
 8000746:	e7e6      	b.n	8000716 <__swsetup_r+0x1e>
 8000748:	0758      	lsls	r0, r3, #29
 800074a:	d512      	bpl.n	8000772 <__swsetup_r+0x7a>
 800074c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800074e:	b141      	cbz	r1, 8000762 <__swsetup_r+0x6a>
 8000750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000754:	4299      	cmp	r1, r3
 8000756:	d002      	beq.n	800075e <__swsetup_r+0x66>
 8000758:	4630      	mov	r0, r6
 800075a:	f000 fa57 	bl	8000c0c <_free_r>
 800075e:	2300      	movs	r3, #0
 8000760:	6363      	str	r3, [r4, #52]	; 0x34
 8000762:	89a3      	ldrh	r3, [r4, #12]
 8000764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000768:	81a3      	strh	r3, [r4, #12]
 800076a:	2300      	movs	r3, #0
 800076c:	6063      	str	r3, [r4, #4]
 800076e:	6923      	ldr	r3, [r4, #16]
 8000770:	6023      	str	r3, [r4, #0]
 8000772:	89a3      	ldrh	r3, [r4, #12]
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	81a3      	strh	r3, [r4, #12]
 800077a:	6923      	ldr	r3, [r4, #16]
 800077c:	b94b      	cbnz	r3, 8000792 <__swsetup_r+0x9a>
 800077e:	89a3      	ldrh	r3, [r4, #12]
 8000780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000788:	d003      	beq.n	8000792 <__swsetup_r+0x9a>
 800078a:	4621      	mov	r1, r4
 800078c:	4630      	mov	r0, r6
 800078e:	f000 f9fd 	bl	8000b8c <__smakebuf_r>
 8000792:	89a0      	ldrh	r0, [r4, #12]
 8000794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000798:	f010 0301 	ands.w	r3, r0, #1
 800079c:	d00a      	beq.n	80007b4 <__swsetup_r+0xbc>
 800079e:	2300      	movs	r3, #0
 80007a0:	60a3      	str	r3, [r4, #8]
 80007a2:	6963      	ldr	r3, [r4, #20]
 80007a4:	425b      	negs	r3, r3
 80007a6:	61a3      	str	r3, [r4, #24]
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	b943      	cbnz	r3, 80007be <__swsetup_r+0xc6>
 80007ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007b0:	d1ba      	bne.n	8000728 <__swsetup_r+0x30>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	0781      	lsls	r1, r0, #30
 80007b6:	bf58      	it	pl
 80007b8:	6963      	ldrpl	r3, [r4, #20]
 80007ba:	60a3      	str	r3, [r4, #8]
 80007bc:	e7f4      	b.n	80007a8 <__swsetup_r+0xb0>
 80007be:	2000      	movs	r0, #0
 80007c0:	e7f7      	b.n	80007b2 <__swsetup_r+0xba>
 80007c2:	bf00      	nop
 80007c4:	20000010 	.word	0x20000010
 80007c8:	08000fd4 	.word	0x08000fd4
 80007cc:	08000ff4 	.word	0x08000ff4
 80007d0:	08000fb4 	.word	0x08000fb4

080007d4 <__sflush_r>:
 80007d4:	898a      	ldrh	r2, [r1, #12]
 80007d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d8:	4605      	mov	r5, r0
 80007da:	0710      	lsls	r0, r2, #28
 80007dc:	460c      	mov	r4, r1
 80007de:	d457      	bmi.n	8000890 <__sflush_r+0xbc>
 80007e0:	684b      	ldr	r3, [r1, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dc04      	bgt.n	80007f0 <__sflush_r+0x1c>
 80007e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dc01      	bgt.n	80007f0 <__sflush_r+0x1c>
 80007ec:	2000      	movs	r0, #0
 80007ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d0fa      	beq.n	80007ec <__sflush_r+0x18>
 80007f6:	2300      	movs	r3, #0
 80007f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007fc:	682f      	ldr	r7, [r5, #0]
 80007fe:	602b      	str	r3, [r5, #0]
 8000800:	d032      	beq.n	8000868 <__sflush_r+0x94>
 8000802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000804:	89a3      	ldrh	r3, [r4, #12]
 8000806:	075a      	lsls	r2, r3, #29
 8000808:	d505      	bpl.n	8000816 <__sflush_r+0x42>
 800080a:	6863      	ldr	r3, [r4, #4]
 800080c:	1ac0      	subs	r0, r0, r3
 800080e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000810:	b10b      	cbz	r3, 8000816 <__sflush_r+0x42>
 8000812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000814:	1ac0      	subs	r0, r0, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4602      	mov	r2, r0
 800081a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800081c:	6a21      	ldr	r1, [r4, #32]
 800081e:	4628      	mov	r0, r5
 8000820:	47b0      	blx	r6
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	d106      	bne.n	8000836 <__sflush_r+0x62>
 8000828:	6829      	ldr	r1, [r5, #0]
 800082a:	291d      	cmp	r1, #29
 800082c:	d82c      	bhi.n	8000888 <__sflush_r+0xb4>
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <__sflush_r+0x100>)
 8000830:	40ca      	lsrs	r2, r1
 8000832:	07d6      	lsls	r6, r2, #31
 8000834:	d528      	bpl.n	8000888 <__sflush_r+0xb4>
 8000836:	2200      	movs	r2, #0
 8000838:	6062      	str	r2, [r4, #4]
 800083a:	04d9      	lsls	r1, r3, #19
 800083c:	6922      	ldr	r2, [r4, #16]
 800083e:	6022      	str	r2, [r4, #0]
 8000840:	d504      	bpl.n	800084c <__sflush_r+0x78>
 8000842:	1c42      	adds	r2, r0, #1
 8000844:	d101      	bne.n	800084a <__sflush_r+0x76>
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	b903      	cbnz	r3, 800084c <__sflush_r+0x78>
 800084a:	6560      	str	r0, [r4, #84]	; 0x54
 800084c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800084e:	602f      	str	r7, [r5, #0]
 8000850:	2900      	cmp	r1, #0
 8000852:	d0cb      	beq.n	80007ec <__sflush_r+0x18>
 8000854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000858:	4299      	cmp	r1, r3
 800085a:	d002      	beq.n	8000862 <__sflush_r+0x8e>
 800085c:	4628      	mov	r0, r5
 800085e:	f000 f9d5 	bl	8000c0c <_free_r>
 8000862:	2000      	movs	r0, #0
 8000864:	6360      	str	r0, [r4, #52]	; 0x34
 8000866:	e7c2      	b.n	80007ee <__sflush_r+0x1a>
 8000868:	6a21      	ldr	r1, [r4, #32]
 800086a:	2301      	movs	r3, #1
 800086c:	4628      	mov	r0, r5
 800086e:	47b0      	blx	r6
 8000870:	1c41      	adds	r1, r0, #1
 8000872:	d1c7      	bne.n	8000804 <__sflush_r+0x30>
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0c4      	beq.n	8000804 <__sflush_r+0x30>
 800087a:	2b1d      	cmp	r3, #29
 800087c:	d001      	beq.n	8000882 <__sflush_r+0xae>
 800087e:	2b16      	cmp	r3, #22
 8000880:	d101      	bne.n	8000886 <__sflush_r+0xb2>
 8000882:	602f      	str	r7, [r5, #0]
 8000884:	e7b2      	b.n	80007ec <__sflush_r+0x18>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	81a3      	strh	r3, [r4, #12]
 800088e:	e7ae      	b.n	80007ee <__sflush_r+0x1a>
 8000890:	690f      	ldr	r7, [r1, #16]
 8000892:	2f00      	cmp	r7, #0
 8000894:	d0aa      	beq.n	80007ec <__sflush_r+0x18>
 8000896:	0793      	lsls	r3, r2, #30
 8000898:	680e      	ldr	r6, [r1, #0]
 800089a:	bf08      	it	eq
 800089c:	694b      	ldreq	r3, [r1, #20]
 800089e:	600f      	str	r7, [r1, #0]
 80008a0:	bf18      	it	ne
 80008a2:	2300      	movne	r3, #0
 80008a4:	1bf6      	subs	r6, r6, r7
 80008a6:	608b      	str	r3, [r1, #8]
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	dd9f      	ble.n	80007ec <__sflush_r+0x18>
 80008ac:	6a21      	ldr	r1, [r4, #32]
 80008ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80008b2:	4633      	mov	r3, r6
 80008b4:	463a      	mov	r2, r7
 80008b6:	4628      	mov	r0, r5
 80008b8:	47e0      	blx	ip
 80008ba:	2800      	cmp	r0, #0
 80008bc:	dc06      	bgt.n	80008cc <__sflush_r+0xf8>
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	81a3      	strh	r3, [r4, #12]
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	e790      	b.n	80007ee <__sflush_r+0x1a>
 80008cc:	4407      	add	r7, r0
 80008ce:	1a36      	subs	r6, r6, r0
 80008d0:	e7ea      	b.n	80008a8 <__sflush_r+0xd4>
 80008d2:	bf00      	nop
 80008d4:	20400001 	.word	0x20400001

080008d8 <_fflush_r>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	690b      	ldr	r3, [r1, #16]
 80008dc:	4605      	mov	r5, r0
 80008de:	460c      	mov	r4, r1
 80008e0:	b913      	cbnz	r3, 80008e8 <_fflush_r+0x10>
 80008e2:	2500      	movs	r5, #0
 80008e4:	4628      	mov	r0, r5
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
 80008e8:	b118      	cbz	r0, 80008f2 <_fflush_r+0x1a>
 80008ea:	6983      	ldr	r3, [r0, #24]
 80008ec:	b90b      	cbnz	r3, 80008f2 <_fflush_r+0x1a>
 80008ee:	f000 f887 	bl	8000a00 <__sinit>
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <_fflush_r+0x6c>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	d11b      	bne.n	8000930 <_fflush_r+0x58>
 80008f8:	686c      	ldr	r4, [r5, #4]
 80008fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0ef      	beq.n	80008e2 <_fflush_r+0xa>
 8000902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000904:	07d0      	lsls	r0, r2, #31
 8000906:	d404      	bmi.n	8000912 <_fflush_r+0x3a>
 8000908:	0599      	lsls	r1, r3, #22
 800090a:	d402      	bmi.n	8000912 <_fflush_r+0x3a>
 800090c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800090e:	f000 f915 	bl	8000b3c <__retarget_lock_acquire_recursive>
 8000912:	4628      	mov	r0, r5
 8000914:	4621      	mov	r1, r4
 8000916:	f7ff ff5d 	bl	80007d4 <__sflush_r>
 800091a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800091c:	07da      	lsls	r2, r3, #31
 800091e:	4605      	mov	r5, r0
 8000920:	d4e0      	bmi.n	80008e4 <_fflush_r+0xc>
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	059b      	lsls	r3, r3, #22
 8000926:	d4dd      	bmi.n	80008e4 <_fflush_r+0xc>
 8000928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800092a:	f000 f908 	bl	8000b3e <__retarget_lock_release_recursive>
 800092e:	e7d9      	b.n	80008e4 <_fflush_r+0xc>
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_fflush_r+0x70>)
 8000932:	429c      	cmp	r4, r3
 8000934:	d101      	bne.n	800093a <_fflush_r+0x62>
 8000936:	68ac      	ldr	r4, [r5, #8]
 8000938:	e7df      	b.n	80008fa <_fflush_r+0x22>
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <_fflush_r+0x74>)
 800093c:	429c      	cmp	r4, r3
 800093e:	bf08      	it	eq
 8000940:	68ec      	ldreq	r4, [r5, #12]
 8000942:	e7da      	b.n	80008fa <_fflush_r+0x22>
 8000944:	08000fd4 	.word	0x08000fd4
 8000948:	08000ff4 	.word	0x08000ff4
 800094c:	08000fb4 	.word	0x08000fb4

08000950 <std>:
 8000950:	2300      	movs	r3, #0
 8000952:	b510      	push	{r4, lr}
 8000954:	4604      	mov	r4, r0
 8000956:	e9c0 3300 	strd	r3, r3, [r0]
 800095a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800095e:	6083      	str	r3, [r0, #8]
 8000960:	8181      	strh	r1, [r0, #12]
 8000962:	6643      	str	r3, [r0, #100]	; 0x64
 8000964:	81c2      	strh	r2, [r0, #14]
 8000966:	6183      	str	r3, [r0, #24]
 8000968:	4619      	mov	r1, r3
 800096a:	2208      	movs	r2, #8
 800096c:	305c      	adds	r0, #92	; 0x5c
 800096e:	f7ff fdf3 	bl	8000558 <memset>
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <std+0x38>)
 8000974:	6263      	str	r3, [r4, #36]	; 0x24
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <std+0x3c>)
 8000978:	62a3      	str	r3, [r4, #40]	; 0x28
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <std+0x40>)
 800097c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <std+0x44>)
 8000980:	6224      	str	r4, [r4, #32]
 8000982:	6323      	str	r3, [r4, #48]	; 0x30
 8000984:	bd10      	pop	{r4, pc}
 8000986:	bf00      	nop
 8000988:	08000de9 	.word	0x08000de9
 800098c:	08000e0b 	.word	0x08000e0b
 8000990:	08000e43 	.word	0x08000e43
 8000994:	08000e67 	.word	0x08000e67

08000998 <_cleanup_r>:
 8000998:	4901      	ldr	r1, [pc, #4]	; (80009a0 <_cleanup_r+0x8>)
 800099a:	f000 b8af 	b.w	8000afc <_fwalk_reent>
 800099e:	bf00      	nop
 80009a0:	080008d9 	.word	0x080008d9

080009a4 <__sfmoreglue>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	2268      	movs	r2, #104	; 0x68
 80009a8:	1e4d      	subs	r5, r1, #1
 80009aa:	4355      	muls	r5, r2
 80009ac:	460e      	mov	r6, r1
 80009ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009b2:	f000 f995 	bl	8000ce0 <_malloc_r>
 80009b6:	4604      	mov	r4, r0
 80009b8:	b140      	cbz	r0, 80009cc <__sfmoreglue+0x28>
 80009ba:	2100      	movs	r1, #0
 80009bc:	e9c0 1600 	strd	r1, r6, [r0]
 80009c0:	300c      	adds	r0, #12
 80009c2:	60a0      	str	r0, [r4, #8]
 80009c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009c8:	f7ff fdc6 	bl	8000558 <memset>
 80009cc:	4620      	mov	r0, r4
 80009ce:	bd70      	pop	{r4, r5, r6, pc}

080009d0 <__sfp_lock_acquire>:
 80009d0:	4801      	ldr	r0, [pc, #4]	; (80009d8 <__sfp_lock_acquire+0x8>)
 80009d2:	f000 b8b3 	b.w	8000b3c <__retarget_lock_acquire_recursive>
 80009d6:	bf00      	nop
 80009d8:	200000a5 	.word	0x200000a5

080009dc <__sfp_lock_release>:
 80009dc:	4801      	ldr	r0, [pc, #4]	; (80009e4 <__sfp_lock_release+0x8>)
 80009de:	f000 b8ae 	b.w	8000b3e <__retarget_lock_release_recursive>
 80009e2:	bf00      	nop
 80009e4:	200000a5 	.word	0x200000a5

080009e8 <__sinit_lock_acquire>:
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <__sinit_lock_acquire+0x8>)
 80009ea:	f000 b8a7 	b.w	8000b3c <__retarget_lock_acquire_recursive>
 80009ee:	bf00      	nop
 80009f0:	200000a6 	.word	0x200000a6

080009f4 <__sinit_lock_release>:
 80009f4:	4801      	ldr	r0, [pc, #4]	; (80009fc <__sinit_lock_release+0x8>)
 80009f6:	f000 b8a2 	b.w	8000b3e <__retarget_lock_release_recursive>
 80009fa:	bf00      	nop
 80009fc:	200000a6 	.word	0x200000a6

08000a00 <__sinit>:
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	f7ff fff0 	bl	80009e8 <__sinit_lock_acquire>
 8000a08:	69a3      	ldr	r3, [r4, #24]
 8000a0a:	b11b      	cbz	r3, 8000a14 <__sinit+0x14>
 8000a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a10:	f7ff bff0 	b.w	80009f4 <__sinit_lock_release>
 8000a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a18:	6523      	str	r3, [r4, #80]	; 0x50
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <__sinit+0x68>)
 8000a1c:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <__sinit+0x6c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a22:	42a3      	cmp	r3, r4
 8000a24:	bf04      	itt	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	61a3      	streq	r3, [r4, #24]
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f000 f820 	bl	8000a70 <__sfp>
 8000a30:	6060      	str	r0, [r4, #4]
 8000a32:	4620      	mov	r0, r4
 8000a34:	f000 f81c 	bl	8000a70 <__sfp>
 8000a38:	60a0      	str	r0, [r4, #8]
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f000 f818 	bl	8000a70 <__sfp>
 8000a40:	2200      	movs	r2, #0
 8000a42:	60e0      	str	r0, [r4, #12]
 8000a44:	2104      	movs	r1, #4
 8000a46:	6860      	ldr	r0, [r4, #4]
 8000a48:	f7ff ff82 	bl	8000950 <std>
 8000a4c:	68a0      	ldr	r0, [r4, #8]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2109      	movs	r1, #9
 8000a52:	f7ff ff7d 	bl	8000950 <std>
 8000a56:	68e0      	ldr	r0, [r4, #12]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	2112      	movs	r1, #18
 8000a5c:	f7ff ff78 	bl	8000950 <std>
 8000a60:	2301      	movs	r3, #1
 8000a62:	61a3      	str	r3, [r4, #24]
 8000a64:	e7d2      	b.n	8000a0c <__sinit+0xc>
 8000a66:	bf00      	nop
 8000a68:	08000fb0 	.word	0x08000fb0
 8000a6c:	08000999 	.word	0x08000999

08000a70 <__sfp>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	4607      	mov	r7, r0
 8000a74:	f7ff ffac 	bl	80009d0 <__sfp_lock_acquire>
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <__sfp+0x84>)
 8000a7a:	681e      	ldr	r6, [r3, #0]
 8000a7c:	69b3      	ldr	r3, [r6, #24]
 8000a7e:	b913      	cbnz	r3, 8000a86 <__sfp+0x16>
 8000a80:	4630      	mov	r0, r6
 8000a82:	f7ff ffbd 	bl	8000a00 <__sinit>
 8000a86:	3648      	adds	r6, #72	; 0x48
 8000a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	d503      	bpl.n	8000a98 <__sfp+0x28>
 8000a90:	6833      	ldr	r3, [r6, #0]
 8000a92:	b30b      	cbz	r3, 8000ad8 <__sfp+0x68>
 8000a94:	6836      	ldr	r6, [r6, #0]
 8000a96:	e7f7      	b.n	8000a88 <__sfp+0x18>
 8000a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a9c:	b9d5      	cbnz	r5, 8000ad4 <__sfp+0x64>
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <__sfp+0x88>)
 8000aa0:	60e3      	str	r3, [r4, #12]
 8000aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8000aa8:	f000 f847 	bl	8000b3a <__retarget_lock_init_recursive>
 8000aac:	f7ff ff96 	bl	80009dc <__sfp_lock_release>
 8000ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ab8:	6025      	str	r5, [r4, #0]
 8000aba:	61a5      	str	r5, [r4, #24]
 8000abc:	2208      	movs	r2, #8
 8000abe:	4629      	mov	r1, r5
 8000ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ac4:	f7ff fd48 	bl	8000558 <memset>
 8000ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad4:	3468      	adds	r4, #104	; 0x68
 8000ad6:	e7d9      	b.n	8000a8c <__sfp+0x1c>
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4638      	mov	r0, r7
 8000adc:	f7ff ff62 	bl	80009a4 <__sfmoreglue>
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	6030      	str	r0, [r6, #0]
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d1d5      	bne.n	8000a94 <__sfp+0x24>
 8000ae8:	f7ff ff78 	bl	80009dc <__sfp_lock_release>
 8000aec:	230c      	movs	r3, #12
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	e7ee      	b.n	8000ad0 <__sfp+0x60>
 8000af2:	bf00      	nop
 8000af4:	08000fb0 	.word	0x08000fb0
 8000af8:	ffff0001 	.word	0xffff0001

08000afc <_fwalk_reent>:
 8000afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b00:	4606      	mov	r6, r0
 8000b02:	4688      	mov	r8, r1
 8000b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b08:	2700      	movs	r7, #0
 8000b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8000b12:	d505      	bpl.n	8000b20 <_fwalk_reent+0x24>
 8000b14:	6824      	ldr	r4, [r4, #0]
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d1f7      	bne.n	8000b0a <_fwalk_reent+0xe>
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b20:	89ab      	ldrh	r3, [r5, #12]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d907      	bls.n	8000b36 <_fwalk_reent+0x3a>
 8000b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	d003      	beq.n	8000b36 <_fwalk_reent+0x3a>
 8000b2e:	4629      	mov	r1, r5
 8000b30:	4630      	mov	r0, r6
 8000b32:	47c0      	blx	r8
 8000b34:	4307      	orrs	r7, r0
 8000b36:	3568      	adds	r5, #104	; 0x68
 8000b38:	e7e9      	b.n	8000b0e <_fwalk_reent+0x12>

08000b3a <__retarget_lock_init_recursive>:
 8000b3a:	4770      	bx	lr

08000b3c <__retarget_lock_acquire_recursive>:
 8000b3c:	4770      	bx	lr

08000b3e <__retarget_lock_release_recursive>:
 8000b3e:	4770      	bx	lr

08000b40 <__swhatbuf_r>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	460e      	mov	r6, r1
 8000b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	b096      	sub	sp, #88	; 0x58
 8000b4c:	4614      	mov	r4, r2
 8000b4e:	461d      	mov	r5, r3
 8000b50:	da08      	bge.n	8000b64 <__swhatbuf_r+0x24>
 8000b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	602a      	str	r2, [r5, #0]
 8000b5a:	061a      	lsls	r2, r3, #24
 8000b5c:	d410      	bmi.n	8000b80 <__swhatbuf_r+0x40>
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	e00e      	b.n	8000b82 <__swhatbuf_r+0x42>
 8000b64:	466a      	mov	r2, sp
 8000b66:	f000 f9a5 	bl	8000eb4 <_fstat_r>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	dbf1      	blt.n	8000b52 <__swhatbuf_r+0x12>
 8000b6e:	9a01      	ldr	r2, [sp, #4]
 8000b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b78:	425a      	negs	r2, r3
 8000b7a:	415a      	adcs	r2, r3
 8000b7c:	602a      	str	r2, [r5, #0]
 8000b7e:	e7ee      	b.n	8000b5e <__swhatbuf_r+0x1e>
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	2000      	movs	r0, #0
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	b016      	add	sp, #88	; 0x58
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b8c <__smakebuf_r>:
 8000b8c:	898b      	ldrh	r3, [r1, #12]
 8000b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b90:	079d      	lsls	r5, r3, #30
 8000b92:	4606      	mov	r6, r0
 8000b94:	460c      	mov	r4, r1
 8000b96:	d507      	bpl.n	8000ba8 <__smakebuf_r+0x1c>
 8000b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	6123      	str	r3, [r4, #16]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	6163      	str	r3, [r4, #20]
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}
 8000ba8:	ab01      	add	r3, sp, #4
 8000baa:	466a      	mov	r2, sp
 8000bac:	f7ff ffc8 	bl	8000b40 <__swhatbuf_r>
 8000bb0:	9900      	ldr	r1, [sp, #0]
 8000bb2:	4605      	mov	r5, r0
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f000 f893 	bl	8000ce0 <_malloc_r>
 8000bba:	b948      	cbnz	r0, 8000bd0 <__smakebuf_r+0x44>
 8000bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc0:	059a      	lsls	r2, r3, #22
 8000bc2:	d4ef      	bmi.n	8000ba4 <__smakebuf_r+0x18>
 8000bc4:	f023 0303 	bic.w	r3, r3, #3
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	e7e3      	b.n	8000b98 <__smakebuf_r+0xc>
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <__smakebuf_r+0x7c>)
 8000bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	6020      	str	r0, [r4, #0]
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	81a3      	strh	r3, [r4, #12]
 8000bde:	9b00      	ldr	r3, [sp, #0]
 8000be0:	6163      	str	r3, [r4, #20]
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	6120      	str	r0, [r4, #16]
 8000be6:	b15b      	cbz	r3, 8000c00 <__smakebuf_r+0x74>
 8000be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bec:	4630      	mov	r0, r6
 8000bee:	f000 f973 	bl	8000ed8 <_isatty_r>
 8000bf2:	b128      	cbz	r0, 8000c00 <__smakebuf_r+0x74>
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	f023 0303 	bic.w	r3, r3, #3
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	81a3      	strh	r3, [r4, #12]
 8000c00:	89a0      	ldrh	r0, [r4, #12]
 8000c02:	4305      	orrs	r5, r0
 8000c04:	81a5      	strh	r5, [r4, #12]
 8000c06:	e7cd      	b.n	8000ba4 <__smakebuf_r+0x18>
 8000c08:	08000999 	.word	0x08000999

08000c0c <_free_r>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	4605      	mov	r5, r0
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d041      	beq.n	8000c98 <_free_r+0x8c>
 8000c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c18:	1f0c      	subs	r4, r1, #4
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bfb8      	it	lt
 8000c1e:	18e4      	addlt	r4, r4, r3
 8000c20:	f000 f97c 	bl	8000f1c <__malloc_lock>
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <_free_r+0x90>)
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	b933      	cbnz	r3, 8000c38 <_free_r+0x2c>
 8000c2a:	6063      	str	r3, [r4, #4]
 8000c2c:	6014      	str	r4, [r2, #0]
 8000c2e:	4628      	mov	r0, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b978 	b.w	8000f28 <__malloc_unlock>
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	d908      	bls.n	8000c4e <_free_r+0x42>
 8000c3c:	6820      	ldr	r0, [r4, #0]
 8000c3e:	1821      	adds	r1, r4, r0
 8000c40:	428b      	cmp	r3, r1
 8000c42:	bf01      	itttt	eq
 8000c44:	6819      	ldreq	r1, [r3, #0]
 8000c46:	685b      	ldreq	r3, [r3, #4]
 8000c48:	1809      	addeq	r1, r1, r0
 8000c4a:	6021      	streq	r1, [r4, #0]
 8000c4c:	e7ed      	b.n	8000c2a <_free_r+0x1e>
 8000c4e:	461a      	mov	r2, r3
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	b10b      	cbz	r3, 8000c58 <_free_r+0x4c>
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d9fa      	bls.n	8000c4e <_free_r+0x42>
 8000c58:	6811      	ldr	r1, [r2, #0]
 8000c5a:	1850      	adds	r0, r2, r1
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d10b      	bne.n	8000c78 <_free_r+0x6c>
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	4401      	add	r1, r0
 8000c64:	1850      	adds	r0, r2, r1
 8000c66:	4283      	cmp	r3, r0
 8000c68:	6011      	str	r1, [r2, #0]
 8000c6a:	d1e0      	bne.n	8000c2e <_free_r+0x22>
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	6053      	str	r3, [r2, #4]
 8000c72:	4401      	add	r1, r0
 8000c74:	6011      	str	r1, [r2, #0]
 8000c76:	e7da      	b.n	8000c2e <_free_r+0x22>
 8000c78:	d902      	bls.n	8000c80 <_free_r+0x74>
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	602b      	str	r3, [r5, #0]
 8000c7e:	e7d6      	b.n	8000c2e <_free_r+0x22>
 8000c80:	6820      	ldr	r0, [r4, #0]
 8000c82:	1821      	adds	r1, r4, r0
 8000c84:	428b      	cmp	r3, r1
 8000c86:	bf04      	itt	eq
 8000c88:	6819      	ldreq	r1, [r3, #0]
 8000c8a:	685b      	ldreq	r3, [r3, #4]
 8000c8c:	6063      	str	r3, [r4, #4]
 8000c8e:	bf04      	itt	eq
 8000c90:	1809      	addeq	r1, r1, r0
 8000c92:	6021      	streq	r1, [r4, #0]
 8000c94:	6054      	str	r4, [r2, #4]
 8000c96:	e7ca      	b.n	8000c2e <_free_r+0x22>
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a8 	.word	0x200000a8

08000ca0 <sbrk_aligned>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4e0e      	ldr	r6, [pc, #56]	; (8000cdc <sbrk_aligned+0x3c>)
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	6831      	ldr	r1, [r6, #0]
 8000ca8:	4605      	mov	r5, r0
 8000caa:	b911      	cbnz	r1, 8000cb2 <sbrk_aligned+0x12>
 8000cac:	f000 f88c 	bl	8000dc8 <_sbrk_r>
 8000cb0:	6030      	str	r0, [r6, #0]
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f000 f887 	bl	8000dc8 <_sbrk_r>
 8000cba:	1c43      	adds	r3, r0, #1
 8000cbc:	d00a      	beq.n	8000cd4 <sbrk_aligned+0x34>
 8000cbe:	1cc4      	adds	r4, r0, #3
 8000cc0:	f024 0403 	bic.w	r4, r4, #3
 8000cc4:	42a0      	cmp	r0, r4
 8000cc6:	d007      	beq.n	8000cd8 <sbrk_aligned+0x38>
 8000cc8:	1a21      	subs	r1, r4, r0
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f000 f87c 	bl	8000dc8 <_sbrk_r>
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	d101      	bne.n	8000cd8 <sbrk_aligned+0x38>
 8000cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8000cd8:	4620      	mov	r0, r4
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	200000ac 	.word	0x200000ac

08000ce0 <_malloc_r>:
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce4:	1ccd      	adds	r5, r1, #3
 8000ce6:	f025 0503 	bic.w	r5, r5, #3
 8000cea:	3508      	adds	r5, #8
 8000cec:	2d0c      	cmp	r5, #12
 8000cee:	bf38      	it	cc
 8000cf0:	250c      	movcc	r5, #12
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	4607      	mov	r7, r0
 8000cf6:	db01      	blt.n	8000cfc <_malloc_r+0x1c>
 8000cf8:	42a9      	cmp	r1, r5
 8000cfa:	d905      	bls.n	8000d08 <_malloc_r+0x28>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	2600      	movs	r6, #0
 8000d02:	4630      	mov	r0, r6
 8000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d08:	4e2e      	ldr	r6, [pc, #184]	; (8000dc4 <_malloc_r+0xe4>)
 8000d0a:	f000 f907 	bl	8000f1c <__malloc_lock>
 8000d0e:	6833      	ldr	r3, [r6, #0]
 8000d10:	461c      	mov	r4, r3
 8000d12:	bb34      	cbnz	r4, 8000d62 <_malloc_r+0x82>
 8000d14:	4629      	mov	r1, r5
 8000d16:	4638      	mov	r0, r7
 8000d18:	f7ff ffc2 	bl	8000ca0 <sbrk_aligned>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	4604      	mov	r4, r0
 8000d20:	d14d      	bne.n	8000dbe <_malloc_r+0xde>
 8000d22:	6834      	ldr	r4, [r6, #0]
 8000d24:	4626      	mov	r6, r4
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d140      	bne.n	8000dac <_malloc_r+0xcc>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	4638      	mov	r0, r7
 8000d30:	eb04 0803 	add.w	r8, r4, r3
 8000d34:	f000 f848 	bl	8000dc8 <_sbrk_r>
 8000d38:	4580      	cmp	r8, r0
 8000d3a:	d13a      	bne.n	8000db2 <_malloc_r+0xd2>
 8000d3c:	6821      	ldr	r1, [r4, #0]
 8000d3e:	3503      	adds	r5, #3
 8000d40:	1a6d      	subs	r5, r5, r1
 8000d42:	f025 0503 	bic.w	r5, r5, #3
 8000d46:	3508      	adds	r5, #8
 8000d48:	2d0c      	cmp	r5, #12
 8000d4a:	bf38      	it	cc
 8000d4c:	250c      	movcc	r5, #12
 8000d4e:	4629      	mov	r1, r5
 8000d50:	4638      	mov	r0, r7
 8000d52:	f7ff ffa5 	bl	8000ca0 <sbrk_aligned>
 8000d56:	3001      	adds	r0, #1
 8000d58:	d02b      	beq.n	8000db2 <_malloc_r+0xd2>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	442b      	add	r3, r5
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e00e      	b.n	8000d80 <_malloc_r+0xa0>
 8000d62:	6822      	ldr	r2, [r4, #0]
 8000d64:	1b52      	subs	r2, r2, r5
 8000d66:	d41e      	bmi.n	8000da6 <_malloc_r+0xc6>
 8000d68:	2a0b      	cmp	r2, #11
 8000d6a:	d916      	bls.n	8000d9a <_malloc_r+0xba>
 8000d6c:	1961      	adds	r1, r4, r5
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	6025      	str	r5, [r4, #0]
 8000d72:	bf18      	it	ne
 8000d74:	6059      	strne	r1, [r3, #4]
 8000d76:	6863      	ldr	r3, [r4, #4]
 8000d78:	bf08      	it	eq
 8000d7a:	6031      	streq	r1, [r6, #0]
 8000d7c:	5162      	str	r2, [r4, r5]
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	4638      	mov	r0, r7
 8000d82:	f104 060b 	add.w	r6, r4, #11
 8000d86:	f000 f8cf 	bl	8000f28 <__malloc_unlock>
 8000d8a:	f026 0607 	bic.w	r6, r6, #7
 8000d8e:	1d23      	adds	r3, r4, #4
 8000d90:	1af2      	subs	r2, r6, r3
 8000d92:	d0b6      	beq.n	8000d02 <_malloc_r+0x22>
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	50a3      	str	r3, [r4, r2]
 8000d98:	e7b3      	b.n	8000d02 <_malloc_r+0x22>
 8000d9a:	6862      	ldr	r2, [r4, #4]
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	bf0c      	ite	eq
 8000da0:	6032      	streq	r2, [r6, #0]
 8000da2:	605a      	strne	r2, [r3, #4]
 8000da4:	e7ec      	b.n	8000d80 <_malloc_r+0xa0>
 8000da6:	4623      	mov	r3, r4
 8000da8:	6864      	ldr	r4, [r4, #4]
 8000daa:	e7b2      	b.n	8000d12 <_malloc_r+0x32>
 8000dac:	4634      	mov	r4, r6
 8000dae:	6876      	ldr	r6, [r6, #4]
 8000db0:	e7b9      	b.n	8000d26 <_malloc_r+0x46>
 8000db2:	230c      	movs	r3, #12
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4638      	mov	r0, r7
 8000db8:	f000 f8b6 	bl	8000f28 <__malloc_unlock>
 8000dbc:	e7a1      	b.n	8000d02 <_malloc_r+0x22>
 8000dbe:	6025      	str	r5, [r4, #0]
 8000dc0:	e7de      	b.n	8000d80 <_malloc_r+0xa0>
 8000dc2:	bf00      	nop
 8000dc4:	200000a8 	.word	0x200000a8

08000dc8 <_sbrk_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d06      	ldr	r5, [pc, #24]	; (8000de4 <_sbrk_r+0x1c>)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	602b      	str	r3, [r5, #0]
 8000dd4:	f7ff fb36 	bl	8000444 <_sbrk>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_sbrk_r+0x1a>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_sbrk_r+0x1a>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	200000b0 	.word	0x200000b0

08000de8 <__sread>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	460c      	mov	r4, r1
 8000dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df0:	f000 f8a0 	bl	8000f34 <_read_r>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	bfab      	itete	ge
 8000df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8000dfc:	181b      	addge	r3, r3, r0
 8000dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e02:	bfac      	ite	ge
 8000e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e06:	81a3      	strhlt	r3, [r4, #12]
 8000e08:	bd10      	pop	{r4, pc}

08000e0a <__swrite>:
 8000e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0e:	461f      	mov	r7, r3
 8000e10:	898b      	ldrh	r3, [r1, #12]
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	4605      	mov	r5, r0
 8000e16:	460c      	mov	r4, r1
 8000e18:	4616      	mov	r6, r2
 8000e1a:	d505      	bpl.n	8000e28 <__swrite+0x1e>
 8000e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e20:	2302      	movs	r3, #2
 8000e22:	2200      	movs	r2, #0
 8000e24:	f000 f868 	bl	8000ef8 <_lseek_r>
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e32:	81a3      	strh	r3, [r4, #12]
 8000e34:	4632      	mov	r2, r6
 8000e36:	463b      	mov	r3, r7
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3e:	f000 b817 	b.w	8000e70 <_write_r>

08000e42 <__sseek>:
 8000e42:	b510      	push	{r4, lr}
 8000e44:	460c      	mov	r4, r1
 8000e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4a:	f000 f855 	bl	8000ef8 <_lseek_r>
 8000e4e:	1c43      	adds	r3, r0, #1
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	bf15      	itete	ne
 8000e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e5e:	81a3      	strheq	r3, [r4, #12]
 8000e60:	bf18      	it	ne
 8000e62:	81a3      	strhne	r3, [r4, #12]
 8000e64:	bd10      	pop	{r4, pc}

08000e66 <__sclose>:
 8000e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6a:	f000 b813 	b.w	8000e94 <_close_r>
	...

08000e70 <_write_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4d07      	ldr	r5, [pc, #28]	; (8000e90 <_write_r+0x20>)
 8000e74:	4604      	mov	r4, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4611      	mov	r1, r2
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	602a      	str	r2, [r5, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f7ff fa93 	bl	80003aa <_write>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	d102      	bne.n	8000e8e <_write_r+0x1e>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	b103      	cbz	r3, 8000e8e <_write_r+0x1e>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
 8000e90:	200000b0 	.word	0x200000b0

08000e94 <_close_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d06      	ldr	r5, [pc, #24]	; (8000eb0 <_close_r+0x1c>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	f7ff fa9f 	bl	80003e2 <_close>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_close_r+0x1a>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_close_r+0x1a>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	200000b0 	.word	0x200000b0

08000eb4 <_fstat_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d07      	ldr	r5, [pc, #28]	; (8000ed4 <_fstat_r+0x20>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	f7ff fa99 	bl	80003f8 <_fstat>
 8000ec6:	1c43      	adds	r3, r0, #1
 8000ec8:	d102      	bne.n	8000ed0 <_fstat_r+0x1c>
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	b103      	cbz	r3, 8000ed0 <_fstat_r+0x1c>
 8000ece:	6023      	str	r3, [r4, #0]
 8000ed0:	bd38      	pop	{r3, r4, r5, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000b0 	.word	0x200000b0

08000ed8 <_isatty_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4d06      	ldr	r5, [pc, #24]	; (8000ef4 <_isatty_r+0x1c>)
 8000edc:	2300      	movs	r3, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	602b      	str	r3, [r5, #0]
 8000ee4:	f7ff fa97 	bl	8000416 <_isatty>
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	d102      	bne.n	8000ef2 <_isatty_r+0x1a>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	b103      	cbz	r3, 8000ef2 <_isatty_r+0x1a>
 8000ef0:	6023      	str	r3, [r4, #0]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	200000b0 	.word	0x200000b0

08000ef8 <_lseek_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4d07      	ldr	r5, [pc, #28]	; (8000f18 <_lseek_r+0x20>)
 8000efc:	4604      	mov	r4, r0
 8000efe:	4608      	mov	r0, r1
 8000f00:	4611      	mov	r1, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	602a      	str	r2, [r5, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f7ff fa8f 	bl	800042a <_lseek>
 8000f0c:	1c43      	adds	r3, r0, #1
 8000f0e:	d102      	bne.n	8000f16 <_lseek_r+0x1e>
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	b103      	cbz	r3, 8000f16 <_lseek_r+0x1e>
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
 8000f18:	200000b0 	.word	0x200000b0

08000f1c <__malloc_lock>:
 8000f1c:	4801      	ldr	r0, [pc, #4]	; (8000f24 <__malloc_lock+0x8>)
 8000f1e:	f7ff be0d 	b.w	8000b3c <__retarget_lock_acquire_recursive>
 8000f22:	bf00      	nop
 8000f24:	200000a4 	.word	0x200000a4

08000f28 <__malloc_unlock>:
 8000f28:	4801      	ldr	r0, [pc, #4]	; (8000f30 <__malloc_unlock+0x8>)
 8000f2a:	f7ff be08 	b.w	8000b3e <__retarget_lock_release_recursive>
 8000f2e:	bf00      	nop
 8000f30:	200000a4 	.word	0x200000a4

08000f34 <_read_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4d07      	ldr	r5, [pc, #28]	; (8000f54 <_read_r+0x20>)
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	602a      	str	r2, [r5, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	f7ff fa14 	bl	8000370 <_read>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_read_r+0x1e>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_read_r+0x1e>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	200000b0 	.word	0x200000b0

08000f58 <_init>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr

08000f64 <_fini>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	bf00      	nop
 8000f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6a:	bc08      	pop	{r3}
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	4770      	bx	lr
