
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800130c  0800130c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800130c  0800130c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800130c  0800130c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800130c  0800130c  0001130c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000074  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d93  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000507  00000000  00000000  00020e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  000214f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d02  00000000  00000000  00021680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000195a  00000000  00000000  00024382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097de  00000000  00000000  00025cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f4ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c98  00000000  00000000  0002f50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001228 	.word	0x08001228

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08001228 	.word	0x08001228

080001d4 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d3f8      	bcc.n	80001e2 <delay+0xe>
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <led_init_all>:

void led_init_all(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	uint32_t *pAHB = (uint32_t*)0x40021014; // AHB base 0x40021000 + offset 0x14
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <led_init_all+0x60>)
 8000204:	607b      	str	r3, [r7, #4]
	*pAHB |= (1 << 18);	// GPIOB enable
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]

	uint32_t *pGPIOBMode = (uint32_t*)0x48000400;	// GPIOB base 0x48000400 + offset 0x00
 8000212:	4b13      	ldr	r3, [pc, #76]	; (8000260 <led_init_all+0x64>)
 8000214:	603b      	str	r3, [r7, #0]


	// configure LEDs
	*pGPIOBMode &= ~(3 << (2 * LED_BLUE));	// initializer gpiob 7 as 00 at 14th and 15th bit
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	601a      	str	r2, [r3, #0]
	*pGPIOBMode |= 1 << (2 * LED_BLUE);	// set gpiob 7 as 01 at 14th and 15th bit
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	601a      	str	r2, [r3, #0]

	*pGPIOBMode &= ~(3 << (2 * LED_RED));	// initializer gpiob 14 as 00 at 14th and 15th bit
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGPIOBMode |= 1 << (2 * LED_RED);	// set gpiob 14 as 01 at 14th and 15th bit
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_RED);
 8000246:	200e      	movs	r0, #14
 8000248:	f000 f824 	bl	8000294 <led_off>
    led_off(LED_BLUE);
 800024c:	2007      	movs	r0, #7
 800024e:	f000 f821 	bl	8000294 <led_off>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021014 	.word	0x40021014
 8000260:	48000400 	.word	0x48000400

08000264 <led_on>:

void led_on(uint8_t led_no)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOBODR = (uint32_t*)0x48000414;	// GPIOB base 0x48000400 + offset 0x14
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <led_on+0x2c>)
 8000270:	60fb      	str	r3, [r7, #12]
	*pGPIOBODR |= ( 1 << led_no);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]

}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	48000414 	.word	0x48000414

08000294 <led_off>:

void led_off(uint8_t led_no)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOBODR = (uint32_t*)0x48000414;	// GPIOB base 0x48000400 + offset 0x14
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <led_off+0x2c>)
 80002a0:	60fb      	str	r3, [r7, #12]
	*pGPIOBODR &= ~( 1 << led_no);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	48000414 	.word	0x48000414

080002c4 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	// we are dealing with stack memory and we may
	// be touching or we may doing some illegal activities related to memory
	// or inline assembly or whatever it could be, or there may be fault while changing from
	// handler to thread mode or something like that.
	// In order to trace the fault!
	enable_processor_faults();
 80002c8:	f000 f904 	bl	80004d4 <enable_processor_faults>

	/* here use MSP as stack pointer by default */

	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0x28>)
 80002ce:	f000 f87b 	bl	80003c8 <init_scheduler_stack>
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;
	*/

	init_tasks_stack();
 80002d2:	f000 f87f 	bl	80003d4 <init_tasks_stack>

	led_init_all();	// initializa all LEDs
 80002d6:	f7ff ff91 	bl	80001fc <led_init_all>

	init_systick_timer(TICK_HZ);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 f83b 	bl	8000358 <init_systick_timer>

	/* before call task1_handler, need to transfer to PSP as stack pointer */
	switch_sp_to_psp();
 80002e2:	f000 f94f 	bl	8000584 <switch_sp_to_psp>

	task1_handler();
 80002e6:	f000 f803 	bl	80002f0 <task1_handler>

	for(;;);
 80002ea:	e7fe      	b.n	80002ea <main+0x26>
 80002ec:	2000f000 	.word	0x2000f000

080002f0 <task1_handler>:
}

void task1_handler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	while(1)
	{
//		printf("This is task1\n");
		led_on(LED_BLUE);
 80002f4:	2007      	movs	r0, #7
 80002f6:	f7ff ffb5 	bl	8000264 <led_on>
		delay(DELAY_COUNT_1S);
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <task1_handler+0x20>)
 80002fc:	f7ff ff6a 	bl	80001d4 <delay>
		led_off(LED_BLUE);
 8000300:	2007      	movs	r0, #7
 8000302:	f7ff ffc7 	bl	8000294 <led_off>
		delay(DELAY_COUNT_1S);
 8000306:	4802      	ldr	r0, [pc, #8]	; (8000310 <task1_handler+0x20>)
 8000308:	f7ff ff64 	bl	80001d4 <delay>
		led_on(LED_BLUE);
 800030c:	e7f2      	b.n	80002f4 <task1_handler+0x4>
 800030e:	bf00      	nop
 8000310:	001312d0 	.word	0x001312d0

08000314 <task2_handler>:
	}
}
void task2_handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1)
	{
//		printf("This is task2\n");
		led_on(LED_RED);
 8000318:	200e      	movs	r0, #14
 800031a:	f7ff ffa3 	bl	8000264 <led_on>
		delay(DELAY_COUNT_500MS);
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <task2_handler+0x20>)
 8000320:	f7ff ff58 	bl	80001d4 <delay>
		led_off(LED_RED);
 8000324:	200e      	movs	r0, #14
 8000326:	f7ff ffb5 	bl	8000294 <led_off>
		delay(DELAY_COUNT_500MS);
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <task2_handler+0x20>)
 800032c:	f7ff ff52 	bl	80001d4 <delay>
		led_on(LED_RED);
 8000330:	e7f2      	b.n	8000318 <task2_handler+0x4>
 8000332:	bf00      	nop
 8000334:	00098968 	.word	0x00098968

08000338 <task3_handler>:
	}
}
void task3_handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task3\n");
 800033c:	4801      	ldr	r0, [pc, #4]	; (8000344 <task3_handler+0xc>)
 800033e:	f000 fae9 	bl	8000914 <puts>
 8000342:	e7fb      	b.n	800033c <task3_handler+0x4>
 8000344:	08001240 	.word	0x08001240

08000348 <task4_handler>:
	}
}
void task4_handler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task4\n");
 800034c:	4801      	ldr	r0, [pc, #4]	; (8000354 <task4_handler+0xc>)
 800034e:	f000 fae1 	bl	8000914 <puts>
 8000352:	e7fb      	b.n	800034c <task4_handler+0x4>
 8000354:	08001250 	.word	0x08001250

08000358 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <init_systick_timer+0x64>)
 8000362:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <init_systick_timer+0x68>)
 8000366:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <init_systick_timer+0x6c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	3b01      	subs	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]

	// load the value in to SVR
	*pSRVR |= count_value;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	431a      	orrs	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f043 0202 	orr.w	r2, r3, #2
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f043 0204 	orr.w	r2, r3, #4
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	601a      	str	r2, [r3, #0]

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f043 0201 	orr.w	r2, r3, #1
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000e014 	.word	0xe000e014
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	007a1200 	.word	0x007a1200

080003c8 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003c8:	4603      	mov	r3, r0
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
 80003ca:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");	// go back to main function
 80003ce:	4770      	bx	lr
}
 80003d0:	bf00      	nop
	...

080003d4 <init_tasks_stack>:




void init_tasks_stack(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
	// keep all the task in a running state
	user_tasks[0].current_state = TASK_RUNNING_STATE;
 80003da:	4b35      	ldr	r3, [pc, #212]	; (80004b0 <init_tasks_stack+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 80003e0:	4b33      	ldr	r3, [pc, #204]	; (80004b0 <init_tasks_stack+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 80003e6:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <init_tasks_stack+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 80003ee:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <init_tasks_stack+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// initialize psp value
	user_tasks[0].psp_value = T1_STACK_START;
 80003f6:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <init_tasks_stack+0xdc>)
 80003f8:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <init_tasks_stack+0xe0>)
 80003fa:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START;
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <init_tasks_stack+0xdc>)
 80003fe:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <init_tasks_stack+0xe4>)
 8000400:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START;
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <init_tasks_stack+0xdc>)
 8000404:	4a2d      	ldr	r2, [pc, #180]	; (80004bc <init_tasks_stack+0xe8>)
 8000406:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START;
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <init_tasks_stack+0xdc>)
 800040a:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <init_tasks_stack+0xec>)
 800040c:	631a      	str	r2, [r3, #48]	; 0x30

	// initialize function pointer
	user_tasks[0].task_handler = task1_handler;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <init_tasks_stack+0xdc>)
 8000410:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <init_tasks_stack+0xf0>)
 8000412:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <init_tasks_stack+0xdc>)
 8000416:	4a2c      	ldr	r2, [pc, #176]	; (80004c8 <init_tasks_stack+0xf4>)
 8000418:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler;
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <init_tasks_stack+0xdc>)
 800041c:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <init_tasks_stack+0xf8>)
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler;
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <init_tasks_stack+0xdc>)
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <init_tasks_stack+0xfc>)
 8000424:	63da      	str	r2, [r3, #60]	; 0x3c


	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	e037      	b.n	800049c <init_tasks_stack+0xc8>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800042c:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <init_tasks_stack+0xdc>)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	4413      	add	r3, r2
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	60fb      	str	r3, [r7, #12]

		/* fully descending */
		pPSP--;	// xPSR
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3b04      	subs	r3, #4
 800043c:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;	// 0x00100000
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000444:	601a      	str	r2, [r3, #0]

		pPSP--;	// PC
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	3b04      	subs	r3, #4
 800044a:	60fb      	str	r3, [r7, #12]
		*pPSP =  (uint32_t) user_tasks[i].task_handler;
 800044c:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <init_tasks_stack+0xdc>)
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	4413      	add	r3, r2
 8000454:	330c      	adds	r3, #12
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	601a      	str	r2, [r3, #0]

		pPSP--;	// LR
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3b04      	subs	r3, #4
 8000462:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f06f 0202 	mvn.w	r2, #2
 800046a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++){
 800046c:	2300      	movs	r3, #0
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	e008      	b.n	8000484 <init_tasks_stack+0xb0>
			pPSP--;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3b04      	subs	r3, #4
 8000476:	60fb      	str	r3, [r7, #12]
			*pPSP = 0; // from R12 to R4
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3301      	adds	r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b0c      	cmp	r3, #12
 8000488:	ddf3      	ble.n	8000472 <init_tasks_stack+0x9e>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP; // preserve the PSP value, very important
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4908      	ldr	r1, [pc, #32]	; (80004b0 <init_tasks_stack+0xdc>)
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	440b      	add	r3, r1
 8000494:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	3301      	adds	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	2b03      	cmp	r3, #3
 80004a0:	ddc4      	ble.n	800042c <init_tasks_stack+0x58>
	}
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000084 	.word	0x20000084
 80004b4:	20010000 	.word	0x20010000
 80004b8:	2000fc00 	.word	0x2000fc00
 80004bc:	2000f800 	.word	0x2000f800
 80004c0:	2000f400 	.word	0x2000f400
 80004c4:	080002f1 	.word	0x080002f1
 80004c8:	08000315 	.word	0x08000315
 80004cc:	08000339 	.word	0x08000339
 80004d0:	08000349 	.word	0x08000349

080004d4 <enable_processor_faults>:

void enable_processor_faults(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	uint32_t *pSHCRS = (uint32_t*)0xE000ED24;
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <enable_processor_faults+0x38>)
 80004dc:	607b      	str	r3, [r7, #4]

	*pSHCRS |= ( 1 << 16); // mem manage
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
	*pSHCRS |= ( 1 << 17); // bus fault
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
	*pSHCRS |= ( 1 << 18); // usage fault
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	e000ed24 	.word	0xe000ed24

08000510 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <save_psp_value+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <save_psp_value+0x24>)
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	4413      	add	r3, r2
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
	//	psp_of_tasks[current_task] = current_psp_value;
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000080 	.word	0x20000080
 8000534:	20000084 	.word	0x20000084

08000538 <update_next_task>:

void update_next_task(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	current_task++;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <update_next_task+0x28>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <update_next_task+0x28>)
 8000546:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;	// 0 -> 1 -> 2 -> 3 -> 0 ...
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <update_next_task+0x28>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f003 0303 	and.w	r3, r3, #3
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b03      	ldr	r3, [pc, #12]	; (8000560 <update_next_task+0x28>)
 8000554:	701a      	strb	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000080 	.word	0x20000080

08000564 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <get_psp_value+0x18>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <get_psp_value+0x1c>)
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	4413      	add	r3, r2
 8000572:	681b      	ldr	r3, [r3, #0]
	// return psp_of_tasks[current_task];
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000080 	.word	0x20000080
 8000580:	20000084 	.word	0x20000084

08000584 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)	// change SP to PSP need inline assembly "MRS"
{
	// 1. initializer the PSP with TASK1 stack start

	// get the value of PSP of current_task
	__asm volatile ("PUSH {LR}");	// preserve LR which connects back to main
 8000584:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");	// the code will branch to get_psp_value
 8000586:	f7ff ffed 	bl	8000564 <get_psp_value>
	__asm volatile ("MSR PSP,R0");	// initialize PSP
 800058a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");	// pops back LR value
 800058e:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");	// use MOV instruction to store some immediate value
 8000592:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");	// push R0 to CONTROL register
 8000596:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800059a:	4770      	bx	lr
}
 800059c:	bf00      	nop

0800059e <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task */
	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
 800059e:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile ("STMDB R0!,{R4-R11}");
 80005a2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile ("PUSH {LR}");	// save LR value
 80005a6:	b500      	push	{lr}

	// 3. Save the current of PSP
	__asm volatile ("BL save_psp_value");	//LR will going to change here
 80005a8:	f7ff ffb2 	bl	8000510 <save_psp_value>


	/* Retrieve the context of next task */
	// 1. Decide next task to run

	__asm volatile ("BL update_next_task");	//LR will going to change here
 80005ac:	f7ff ffc4 	bl	8000538 <update_next_task>

	// 2. get its past PSP value
	__asm volatile ("BL get_psp_value");	//LR will going to change here
 80005b0:	f7ff ffd8 	bl	8000564 <get_psp_value>

	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDM R0!, {R4-R11}");
 80005b4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. update PSP and exit
	__asm volatile ("MSR PSP, R0");
 80005b8:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");	// retrieve LR value
 80005bc:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");	// write exception exit manually.
 80005c0:	4770      	bx	lr
}
 80005c2:	bf00      	nop

080005c4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <HardFault_Handler+0xc>)
 80005ca:	f000 f9a3 	bl	8000914 <puts>
	while(1);	// hang
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0xa>
 80005d0:	08001260 	.word	0x08001260

080005d4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80005d8:	4801      	ldr	r0, [pc, #4]	; (80005e0 <MemManage_Handler+0xc>)
 80005da:	f000 f99b 	bl	8000914 <puts>
	while(1);	// hang
 80005de:	e7fe      	b.n	80005de <MemManage_Handler+0xa>
 80005e0:	08001278 	.word	0x08001278

080005e4 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80005e8:	4801      	ldr	r0, [pc, #4]	; (80005f0 <BusFault_Handler+0xc>)
 80005ea:	f000 f993 	bl	8000914 <puts>
	while(1);	// hang
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0xa>
 80005f0:	08001290 	.word	0x08001290

080005f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ITM_SendChar+0x44>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <ITM_SendChar+0x44>)
 8000604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000608:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <ITM_SendChar+0x48>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <ITM_SendChar+0x48>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000616:	bf00      	nop
 8000618:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f8      	beq.n	8000618 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000626:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	e000edfc 	.word	0xe000edfc
 800063c:	e0000e00 	.word	0xe0000e00

08000640 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e00a      	b.n	8000668 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000652:	f3af 8000 	nop.w
 8000656:	4601      	mov	r1, r0
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	60ba      	str	r2, [r7, #8]
 800065e:	b2ca      	uxtb	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf0      	blt.n	8000652 <_read+0x12>
	}

return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	e009      	b.n	80006a0 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60ba      	str	r2, [r7, #8]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffad 	bl	80005f4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf1      	blt.n	800068c <_write+0x12>
	}
	return len;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_close>:

int _close(int file)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	return -1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d8:	605a      	str	r2, [r3, #4]
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_isatty>:

int _isatty(int file)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b085      	sub	sp, #20
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <_sbrk+0x5c>)
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <_sbrk+0x60>)
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d102      	bne.n	8000736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <_sbrk+0x64>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <_sbrk+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	429a      	cmp	r2, r3
 8000742:	d207      	bcs.n	8000754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000744:	f000 f846 	bl	80007d4 <__errno>
 8000748:	4603      	mov	r3, r0
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	e009      	b.n	8000768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <_sbrk+0x64>)
 8000764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000766:	68fb      	ldr	r3, [r7, #12]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20010000 	.word	0x20010000
 8000774:	00000400 	.word	0x00000400
 8000778:	200000c4 	.word	0x200000c4
 800077c:	200000d8 	.word	0x200000d8

08000780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000782:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000784:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ae:	f000 f817 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fd87 	bl	80002c4 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   r0, =_estack
 80007b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007c4:	08001314 	.word	0x08001314
  ldr r2, =_sbss
 80007c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007cc:	200000d8 	.word	0x200000d8

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <__errno>:
 80007d4:	4b01      	ldr	r3, [pc, #4]	; (80007dc <__errno+0x8>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4d0d      	ldr	r5, [pc, #52]	; (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__libc_init_array+0x3c>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2600      	movs	r6, #0
 80007ec:	42a6      	cmp	r6, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4d0b      	ldr	r5, [pc, #44]	; (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 fd18 	bl	8001228 <_init>
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2600      	movs	r6, #0
 80007fe:	42a6      	cmp	r6, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f855 3b04 	ldr.w	r3, [r5], #4
 8000808:	4798      	blx	r3
 800080a:	3601      	adds	r6, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000812:	4798      	blx	r3
 8000814:	3601      	adds	r6, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	0800130c 	.word	0x0800130c
 800081c:	0800130c 	.word	0x0800130c
 8000820:	0800130c 	.word	0x0800130c
 8000824:	08001310 	.word	0x08001310

08000828 <memset>:
 8000828:	4402      	add	r2, r0
 800082a:	4603      	mov	r3, r0
 800082c:	4293      	cmp	r3, r2
 800082e:	d100      	bne.n	8000832 <memset+0xa>
 8000830:	4770      	bx	lr
 8000832:	f803 1b01 	strb.w	r1, [r3], #1
 8000836:	e7f9      	b.n	800082c <memset+0x4>

08000838 <_puts_r>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	460e      	mov	r6, r1
 800083c:	4605      	mov	r5, r0
 800083e:	b118      	cbz	r0, 8000848 <_puts_r+0x10>
 8000840:	6983      	ldr	r3, [r0, #24]
 8000842:	b90b      	cbnz	r3, 8000848 <_puts_r+0x10>
 8000844:	f000 fa44 	bl	8000cd0 <__sinit>
 8000848:	69ab      	ldr	r3, [r5, #24]
 800084a:	68ac      	ldr	r4, [r5, #8]
 800084c:	b913      	cbnz	r3, 8000854 <_puts_r+0x1c>
 800084e:	4628      	mov	r0, r5
 8000850:	f000 fa3e 	bl	8000cd0 <__sinit>
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <_puts_r+0xd0>)
 8000856:	429c      	cmp	r4, r3
 8000858:	d120      	bne.n	800089c <_puts_r+0x64>
 800085a:	686c      	ldr	r4, [r5, #4]
 800085c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800085e:	07db      	lsls	r3, r3, #31
 8000860:	d405      	bmi.n	800086e <_puts_r+0x36>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	0598      	lsls	r0, r3, #22
 8000866:	d402      	bmi.n	800086e <_puts_r+0x36>
 8000868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800086a:	f000 facf 	bl	8000e0c <__retarget_lock_acquire_recursive>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	0719      	lsls	r1, r3, #28
 8000872:	d51d      	bpl.n	80008b0 <_puts_r+0x78>
 8000874:	6923      	ldr	r3, [r4, #16]
 8000876:	b1db      	cbz	r3, 80008b0 <_puts_r+0x78>
 8000878:	3e01      	subs	r6, #1
 800087a:	68a3      	ldr	r3, [r4, #8]
 800087c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000880:	3b01      	subs	r3, #1
 8000882:	60a3      	str	r3, [r4, #8]
 8000884:	bb39      	cbnz	r1, 80008d6 <_puts_r+0x9e>
 8000886:	2b00      	cmp	r3, #0
 8000888:	da38      	bge.n	80008fc <_puts_r+0xc4>
 800088a:	4622      	mov	r2, r4
 800088c:	210a      	movs	r1, #10
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f848 	bl	8000924 <__swbuf_r>
 8000894:	3001      	adds	r0, #1
 8000896:	d011      	beq.n	80008bc <_puts_r+0x84>
 8000898:	250a      	movs	r5, #10
 800089a:	e011      	b.n	80008c0 <_puts_r+0x88>
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <_puts_r+0xd4>)
 800089e:	429c      	cmp	r4, r3
 80008a0:	d101      	bne.n	80008a6 <_puts_r+0x6e>
 80008a2:	68ac      	ldr	r4, [r5, #8]
 80008a4:	e7da      	b.n	800085c <_puts_r+0x24>
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <_puts_r+0xd8>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	bf08      	it	eq
 80008ac:	68ec      	ldreq	r4, [r5, #12]
 80008ae:	e7d5      	b.n	800085c <_puts_r+0x24>
 80008b0:	4621      	mov	r1, r4
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 f888 	bl	80009c8 <__swsetup_r>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d0dd      	beq.n	8000878 <_puts_r+0x40>
 80008bc:	f04f 35ff 	mov.w	r5, #4294967295
 80008c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008c2:	07da      	lsls	r2, r3, #31
 80008c4:	d405      	bmi.n	80008d2 <_puts_r+0x9a>
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	059b      	lsls	r3, r3, #22
 80008ca:	d402      	bmi.n	80008d2 <_puts_r+0x9a>
 80008cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008ce:	f000 fa9e 	bl	8000e0e <__retarget_lock_release_recursive>
 80008d2:	4628      	mov	r0, r5
 80008d4:	bd70      	pop	{r4, r5, r6, pc}
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da04      	bge.n	80008e4 <_puts_r+0xac>
 80008da:	69a2      	ldr	r2, [r4, #24]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dc06      	bgt.n	80008ee <_puts_r+0xb6>
 80008e0:	290a      	cmp	r1, #10
 80008e2:	d004      	beq.n	80008ee <_puts_r+0xb6>
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	6022      	str	r2, [r4, #0]
 80008ea:	7019      	strb	r1, [r3, #0]
 80008ec:	e7c5      	b.n	800087a <_puts_r+0x42>
 80008ee:	4622      	mov	r2, r4
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 f817 	bl	8000924 <__swbuf_r>
 80008f6:	3001      	adds	r0, #1
 80008f8:	d1bf      	bne.n	800087a <_puts_r+0x42>
 80008fa:	e7df      	b.n	80008bc <_puts_r+0x84>
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	250a      	movs	r5, #10
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	6022      	str	r2, [r4, #0]
 8000904:	701d      	strb	r5, [r3, #0]
 8000906:	e7db      	b.n	80008c0 <_puts_r+0x88>
 8000908:	080012cc 	.word	0x080012cc
 800090c:	080012ec 	.word	0x080012ec
 8000910:	080012ac 	.word	0x080012ac

08000914 <puts>:
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <puts+0xc>)
 8000916:	4601      	mov	r1, r0
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	f7ff bf8d 	b.w	8000838 <_puts_r>
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000

08000924 <__swbuf_r>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	460e      	mov	r6, r1
 8000928:	4614      	mov	r4, r2
 800092a:	4605      	mov	r5, r0
 800092c:	b118      	cbz	r0, 8000936 <__swbuf_r+0x12>
 800092e:	6983      	ldr	r3, [r0, #24]
 8000930:	b90b      	cbnz	r3, 8000936 <__swbuf_r+0x12>
 8000932:	f000 f9cd 	bl	8000cd0 <__sinit>
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <__swbuf_r+0x98>)
 8000938:	429c      	cmp	r4, r3
 800093a:	d12b      	bne.n	8000994 <__swbuf_r+0x70>
 800093c:	686c      	ldr	r4, [r5, #4]
 800093e:	69a3      	ldr	r3, [r4, #24]
 8000940:	60a3      	str	r3, [r4, #8]
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	071a      	lsls	r2, r3, #28
 8000946:	d52f      	bpl.n	80009a8 <__swbuf_r+0x84>
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	b36b      	cbz	r3, 80009a8 <__swbuf_r+0x84>
 800094c:	6923      	ldr	r3, [r4, #16]
 800094e:	6820      	ldr	r0, [r4, #0]
 8000950:	1ac0      	subs	r0, r0, r3
 8000952:	6963      	ldr	r3, [r4, #20]
 8000954:	b2f6      	uxtb	r6, r6
 8000956:	4283      	cmp	r3, r0
 8000958:	4637      	mov	r7, r6
 800095a:	dc04      	bgt.n	8000966 <__swbuf_r+0x42>
 800095c:	4621      	mov	r1, r4
 800095e:	4628      	mov	r0, r5
 8000960:	f000 f922 	bl	8000ba8 <_fflush_r>
 8000964:	bb30      	cbnz	r0, 80009b4 <__swbuf_r+0x90>
 8000966:	68a3      	ldr	r3, [r4, #8]
 8000968:	3b01      	subs	r3, #1
 800096a:	60a3      	str	r3, [r4, #8]
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	6022      	str	r2, [r4, #0]
 8000972:	701e      	strb	r6, [r3, #0]
 8000974:	6963      	ldr	r3, [r4, #20]
 8000976:	3001      	adds	r0, #1
 8000978:	4283      	cmp	r3, r0
 800097a:	d004      	beq.n	8000986 <__swbuf_r+0x62>
 800097c:	89a3      	ldrh	r3, [r4, #12]
 800097e:	07db      	lsls	r3, r3, #31
 8000980:	d506      	bpl.n	8000990 <__swbuf_r+0x6c>
 8000982:	2e0a      	cmp	r6, #10
 8000984:	d104      	bne.n	8000990 <__swbuf_r+0x6c>
 8000986:	4621      	mov	r1, r4
 8000988:	4628      	mov	r0, r5
 800098a:	f000 f90d 	bl	8000ba8 <_fflush_r>
 800098e:	b988      	cbnz	r0, 80009b4 <__swbuf_r+0x90>
 8000990:	4638      	mov	r0, r7
 8000992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <__swbuf_r+0x9c>)
 8000996:	429c      	cmp	r4, r3
 8000998:	d101      	bne.n	800099e <__swbuf_r+0x7a>
 800099a:	68ac      	ldr	r4, [r5, #8]
 800099c:	e7cf      	b.n	800093e <__swbuf_r+0x1a>
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <__swbuf_r+0xa0>)
 80009a0:	429c      	cmp	r4, r3
 80009a2:	bf08      	it	eq
 80009a4:	68ec      	ldreq	r4, [r5, #12]
 80009a6:	e7ca      	b.n	800093e <__swbuf_r+0x1a>
 80009a8:	4621      	mov	r1, r4
 80009aa:	4628      	mov	r0, r5
 80009ac:	f000 f80c 	bl	80009c8 <__swsetup_r>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d0cb      	beq.n	800094c <__swbuf_r+0x28>
 80009b4:	f04f 37ff 	mov.w	r7, #4294967295
 80009b8:	e7ea      	b.n	8000990 <__swbuf_r+0x6c>
 80009ba:	bf00      	nop
 80009bc:	080012cc 	.word	0x080012cc
 80009c0:	080012ec 	.word	0x080012ec
 80009c4:	080012ac 	.word	0x080012ac

080009c8 <__swsetup_r>:
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <__swsetup_r+0xcc>)
 80009ca:	b570      	push	{r4, r5, r6, lr}
 80009cc:	681d      	ldr	r5, [r3, #0]
 80009ce:	4606      	mov	r6, r0
 80009d0:	460c      	mov	r4, r1
 80009d2:	b125      	cbz	r5, 80009de <__swsetup_r+0x16>
 80009d4:	69ab      	ldr	r3, [r5, #24]
 80009d6:	b913      	cbnz	r3, 80009de <__swsetup_r+0x16>
 80009d8:	4628      	mov	r0, r5
 80009da:	f000 f979 	bl	8000cd0 <__sinit>
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <__swsetup_r+0xd0>)
 80009e0:	429c      	cmp	r4, r3
 80009e2:	d10f      	bne.n	8000a04 <__swsetup_r+0x3c>
 80009e4:	686c      	ldr	r4, [r5, #4]
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009ec:	0719      	lsls	r1, r3, #28
 80009ee:	d42c      	bmi.n	8000a4a <__swsetup_r+0x82>
 80009f0:	06dd      	lsls	r5, r3, #27
 80009f2:	d411      	bmi.n	8000a18 <__swsetup_r+0x50>
 80009f4:	2309      	movs	r3, #9
 80009f6:	6033      	str	r3, [r6, #0]
 80009f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009fc:	81a3      	strh	r3, [r4, #12]
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	e03e      	b.n	8000a82 <__swsetup_r+0xba>
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <__swsetup_r+0xd4>)
 8000a06:	429c      	cmp	r4, r3
 8000a08:	d101      	bne.n	8000a0e <__swsetup_r+0x46>
 8000a0a:	68ac      	ldr	r4, [r5, #8]
 8000a0c:	e7eb      	b.n	80009e6 <__swsetup_r+0x1e>
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <__swsetup_r+0xd8>)
 8000a10:	429c      	cmp	r4, r3
 8000a12:	bf08      	it	eq
 8000a14:	68ec      	ldreq	r4, [r5, #12]
 8000a16:	e7e6      	b.n	80009e6 <__swsetup_r+0x1e>
 8000a18:	0758      	lsls	r0, r3, #29
 8000a1a:	d512      	bpl.n	8000a42 <__swsetup_r+0x7a>
 8000a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a1e:	b141      	cbz	r1, 8000a32 <__swsetup_r+0x6a>
 8000a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d002      	beq.n	8000a2e <__swsetup_r+0x66>
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f000 fa57 	bl	8000edc <_free_r>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	6363      	str	r3, [r4, #52]	; 0x34
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a38:	81a3      	strh	r3, [r4, #12]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	6063      	str	r3, [r4, #4]
 8000a3e:	6923      	ldr	r3, [r4, #16]
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	6923      	ldr	r3, [r4, #16]
 8000a4c:	b94b      	cbnz	r3, 8000a62 <__swsetup_r+0x9a>
 8000a4e:	89a3      	ldrh	r3, [r4, #12]
 8000a50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a58:	d003      	beq.n	8000a62 <__swsetup_r+0x9a>
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	f000 f9fd 	bl	8000e5c <__smakebuf_r>
 8000a62:	89a0      	ldrh	r0, [r4, #12]
 8000a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a68:	f010 0301 	ands.w	r3, r0, #1
 8000a6c:	d00a      	beq.n	8000a84 <__swsetup_r+0xbc>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60a3      	str	r3, [r4, #8]
 8000a72:	6963      	ldr	r3, [r4, #20]
 8000a74:	425b      	negs	r3, r3
 8000a76:	61a3      	str	r3, [r4, #24]
 8000a78:	6923      	ldr	r3, [r4, #16]
 8000a7a:	b943      	cbnz	r3, 8000a8e <__swsetup_r+0xc6>
 8000a7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a80:	d1ba      	bne.n	80009f8 <__swsetup_r+0x30>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	0781      	lsls	r1, r0, #30
 8000a86:	bf58      	it	pl
 8000a88:	6963      	ldrpl	r3, [r4, #20]
 8000a8a:	60a3      	str	r3, [r4, #8]
 8000a8c:	e7f4      	b.n	8000a78 <__swsetup_r+0xb0>
 8000a8e:	2000      	movs	r0, #0
 8000a90:	e7f7      	b.n	8000a82 <__swsetup_r+0xba>
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000
 8000a98:	080012cc 	.word	0x080012cc
 8000a9c:	080012ec 	.word	0x080012ec
 8000aa0:	080012ac 	.word	0x080012ac

08000aa4 <__sflush_r>:
 8000aa4:	898a      	ldrh	r2, [r1, #12]
 8000aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	0710      	lsls	r0, r2, #28
 8000aac:	460c      	mov	r4, r1
 8000aae:	d457      	bmi.n	8000b60 <__sflush_r+0xbc>
 8000ab0:	684b      	ldr	r3, [r1, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dc04      	bgt.n	8000ac0 <__sflush_r+0x1c>
 8000ab6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dc01      	bgt.n	8000ac0 <__sflush_r+0x1c>
 8000abc:	2000      	movs	r0, #0
 8000abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d0fa      	beq.n	8000abc <__sflush_r+0x18>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000acc:	682f      	ldr	r7, [r5, #0]
 8000ace:	602b      	str	r3, [r5, #0]
 8000ad0:	d032      	beq.n	8000b38 <__sflush_r+0x94>
 8000ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ad4:	89a3      	ldrh	r3, [r4, #12]
 8000ad6:	075a      	lsls	r2, r3, #29
 8000ad8:	d505      	bpl.n	8000ae6 <__sflush_r+0x42>
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	1ac0      	subs	r0, r0, r3
 8000ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ae0:	b10b      	cbz	r3, 8000ae6 <__sflush_r+0x42>
 8000ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae4:	1ac0      	subs	r0, r0, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4602      	mov	r2, r0
 8000aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aec:	6a21      	ldr	r1, [r4, #32]
 8000aee:	4628      	mov	r0, r5
 8000af0:	47b0      	blx	r6
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	89a3      	ldrh	r3, [r4, #12]
 8000af6:	d106      	bne.n	8000b06 <__sflush_r+0x62>
 8000af8:	6829      	ldr	r1, [r5, #0]
 8000afa:	291d      	cmp	r1, #29
 8000afc:	d82c      	bhi.n	8000b58 <__sflush_r+0xb4>
 8000afe:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <__sflush_r+0x100>)
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	07d6      	lsls	r6, r2, #31
 8000b04:	d528      	bpl.n	8000b58 <__sflush_r+0xb4>
 8000b06:	2200      	movs	r2, #0
 8000b08:	6062      	str	r2, [r4, #4]
 8000b0a:	04d9      	lsls	r1, r3, #19
 8000b0c:	6922      	ldr	r2, [r4, #16]
 8000b0e:	6022      	str	r2, [r4, #0]
 8000b10:	d504      	bpl.n	8000b1c <__sflush_r+0x78>
 8000b12:	1c42      	adds	r2, r0, #1
 8000b14:	d101      	bne.n	8000b1a <__sflush_r+0x76>
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	b903      	cbnz	r3, 8000b1c <__sflush_r+0x78>
 8000b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8000b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b1e:	602f      	str	r7, [r5, #0]
 8000b20:	2900      	cmp	r1, #0
 8000b22:	d0cb      	beq.n	8000abc <__sflush_r+0x18>
 8000b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d002      	beq.n	8000b32 <__sflush_r+0x8e>
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 f9d5 	bl	8000edc <_free_r>
 8000b32:	2000      	movs	r0, #0
 8000b34:	6360      	str	r0, [r4, #52]	; 0x34
 8000b36:	e7c2      	b.n	8000abe <__sflush_r+0x1a>
 8000b38:	6a21      	ldr	r1, [r4, #32]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	47b0      	blx	r6
 8000b40:	1c41      	adds	r1, r0, #1
 8000b42:	d1c7      	bne.n	8000ad4 <__sflush_r+0x30>
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0c4      	beq.n	8000ad4 <__sflush_r+0x30>
 8000b4a:	2b1d      	cmp	r3, #29
 8000b4c:	d001      	beq.n	8000b52 <__sflush_r+0xae>
 8000b4e:	2b16      	cmp	r3, #22
 8000b50:	d101      	bne.n	8000b56 <__sflush_r+0xb2>
 8000b52:	602f      	str	r7, [r5, #0]
 8000b54:	e7b2      	b.n	8000abc <__sflush_r+0x18>
 8000b56:	89a3      	ldrh	r3, [r4, #12]
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	81a3      	strh	r3, [r4, #12]
 8000b5e:	e7ae      	b.n	8000abe <__sflush_r+0x1a>
 8000b60:	690f      	ldr	r7, [r1, #16]
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d0aa      	beq.n	8000abc <__sflush_r+0x18>
 8000b66:	0793      	lsls	r3, r2, #30
 8000b68:	680e      	ldr	r6, [r1, #0]
 8000b6a:	bf08      	it	eq
 8000b6c:	694b      	ldreq	r3, [r1, #20]
 8000b6e:	600f      	str	r7, [r1, #0]
 8000b70:	bf18      	it	ne
 8000b72:	2300      	movne	r3, #0
 8000b74:	1bf6      	subs	r6, r6, r7
 8000b76:	608b      	str	r3, [r1, #8]
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	dd9f      	ble.n	8000abc <__sflush_r+0x18>
 8000b7c:	6a21      	ldr	r1, [r4, #32]
 8000b7e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b82:	4633      	mov	r3, r6
 8000b84:	463a      	mov	r2, r7
 8000b86:	4628      	mov	r0, r5
 8000b88:	47e0      	blx	ip
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	dc06      	bgt.n	8000b9c <__sflush_r+0xf8>
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9a:	e790      	b.n	8000abe <__sflush_r+0x1a>
 8000b9c:	4407      	add	r7, r0
 8000b9e:	1a36      	subs	r6, r6, r0
 8000ba0:	e7ea      	b.n	8000b78 <__sflush_r+0xd4>
 8000ba2:	bf00      	nop
 8000ba4:	20400001 	.word	0x20400001

08000ba8 <_fflush_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	690b      	ldr	r3, [r1, #16]
 8000bac:	4605      	mov	r5, r0
 8000bae:	460c      	mov	r4, r1
 8000bb0:	b913      	cbnz	r3, 8000bb8 <_fflush_r+0x10>
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	b118      	cbz	r0, 8000bc2 <_fflush_r+0x1a>
 8000bba:	6983      	ldr	r3, [r0, #24]
 8000bbc:	b90b      	cbnz	r3, 8000bc2 <_fflush_r+0x1a>
 8000bbe:	f000 f887 	bl	8000cd0 <__sinit>
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <_fflush_r+0x6c>)
 8000bc4:	429c      	cmp	r4, r3
 8000bc6:	d11b      	bne.n	8000c00 <_fflush_r+0x58>
 8000bc8:	686c      	ldr	r4, [r5, #4]
 8000bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0ef      	beq.n	8000bb2 <_fflush_r+0xa>
 8000bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bd4:	07d0      	lsls	r0, r2, #31
 8000bd6:	d404      	bmi.n	8000be2 <_fflush_r+0x3a>
 8000bd8:	0599      	lsls	r1, r3, #22
 8000bda:	d402      	bmi.n	8000be2 <_fflush_r+0x3a>
 8000bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bde:	f000 f915 	bl	8000e0c <__retarget_lock_acquire_recursive>
 8000be2:	4628      	mov	r0, r5
 8000be4:	4621      	mov	r1, r4
 8000be6:	f7ff ff5d 	bl	8000aa4 <__sflush_r>
 8000bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bec:	07da      	lsls	r2, r3, #31
 8000bee:	4605      	mov	r5, r0
 8000bf0:	d4e0      	bmi.n	8000bb4 <_fflush_r+0xc>
 8000bf2:	89a3      	ldrh	r3, [r4, #12]
 8000bf4:	059b      	lsls	r3, r3, #22
 8000bf6:	d4dd      	bmi.n	8000bb4 <_fflush_r+0xc>
 8000bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bfa:	f000 f908 	bl	8000e0e <__retarget_lock_release_recursive>
 8000bfe:	e7d9      	b.n	8000bb4 <_fflush_r+0xc>
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <_fflush_r+0x70>)
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d101      	bne.n	8000c0a <_fflush_r+0x62>
 8000c06:	68ac      	ldr	r4, [r5, #8]
 8000c08:	e7df      	b.n	8000bca <_fflush_r+0x22>
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <_fflush_r+0x74>)
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	bf08      	it	eq
 8000c10:	68ec      	ldreq	r4, [r5, #12]
 8000c12:	e7da      	b.n	8000bca <_fflush_r+0x22>
 8000c14:	080012cc 	.word	0x080012cc
 8000c18:	080012ec 	.word	0x080012ec
 8000c1c:	080012ac 	.word	0x080012ac

08000c20 <std>:
 8000c20:	2300      	movs	r3, #0
 8000c22:	b510      	push	{r4, lr}
 8000c24:	4604      	mov	r4, r0
 8000c26:	e9c0 3300 	strd	r3, r3, [r0]
 8000c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c2e:	6083      	str	r3, [r0, #8]
 8000c30:	8181      	strh	r1, [r0, #12]
 8000c32:	6643      	str	r3, [r0, #100]	; 0x64
 8000c34:	81c2      	strh	r2, [r0, #14]
 8000c36:	6183      	str	r3, [r0, #24]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	305c      	adds	r0, #92	; 0x5c
 8000c3e:	f7ff fdf3 	bl	8000828 <memset>
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <std+0x38>)
 8000c44:	6263      	str	r3, [r4, #36]	; 0x24
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <std+0x3c>)
 8000c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <std+0x40>)
 8000c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <std+0x44>)
 8000c50:	6224      	str	r4, [r4, #32]
 8000c52:	6323      	str	r3, [r4, #48]	; 0x30
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	080010b9 	.word	0x080010b9
 8000c5c:	080010db 	.word	0x080010db
 8000c60:	08001113 	.word	0x08001113
 8000c64:	08001137 	.word	0x08001137

08000c68 <_cleanup_r>:
 8000c68:	4901      	ldr	r1, [pc, #4]	; (8000c70 <_cleanup_r+0x8>)
 8000c6a:	f000 b8af 	b.w	8000dcc <_fwalk_reent>
 8000c6e:	bf00      	nop
 8000c70:	08000ba9 	.word	0x08000ba9

08000c74 <__sfmoreglue>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	2268      	movs	r2, #104	; 0x68
 8000c78:	1e4d      	subs	r5, r1, #1
 8000c7a:	4355      	muls	r5, r2
 8000c7c:	460e      	mov	r6, r1
 8000c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c82:	f000 f995 	bl	8000fb0 <_malloc_r>
 8000c86:	4604      	mov	r4, r0
 8000c88:	b140      	cbz	r0, 8000c9c <__sfmoreglue+0x28>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8000c90:	300c      	adds	r0, #12
 8000c92:	60a0      	str	r0, [r4, #8]
 8000c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c98:	f7ff fdc6 	bl	8000828 <memset>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}

08000ca0 <__sfp_lock_acquire>:
 8000ca0:	4801      	ldr	r0, [pc, #4]	; (8000ca8 <__sfp_lock_acquire+0x8>)
 8000ca2:	f000 b8b3 	b.w	8000e0c <__retarget_lock_acquire_recursive>
 8000ca6:	bf00      	nop
 8000ca8:	200000c9 	.word	0x200000c9

08000cac <__sfp_lock_release>:
 8000cac:	4801      	ldr	r0, [pc, #4]	; (8000cb4 <__sfp_lock_release+0x8>)
 8000cae:	f000 b8ae 	b.w	8000e0e <__retarget_lock_release_recursive>
 8000cb2:	bf00      	nop
 8000cb4:	200000c9 	.word	0x200000c9

08000cb8 <__sinit_lock_acquire>:
 8000cb8:	4801      	ldr	r0, [pc, #4]	; (8000cc0 <__sinit_lock_acquire+0x8>)
 8000cba:	f000 b8a7 	b.w	8000e0c <__retarget_lock_acquire_recursive>
 8000cbe:	bf00      	nop
 8000cc0:	200000ca 	.word	0x200000ca

08000cc4 <__sinit_lock_release>:
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <__sinit_lock_release+0x8>)
 8000cc6:	f000 b8a2 	b.w	8000e0e <__retarget_lock_release_recursive>
 8000cca:	bf00      	nop
 8000ccc:	200000ca 	.word	0x200000ca

08000cd0 <__sinit>:
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	f7ff fff0 	bl	8000cb8 <__sinit_lock_acquire>
 8000cd8:	69a3      	ldr	r3, [r4, #24]
 8000cda:	b11b      	cbz	r3, 8000ce4 <__sinit+0x14>
 8000cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ce0:	f7ff bff0 	b.w	8000cc4 <__sinit_lock_release>
 8000ce4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ce8:	6523      	str	r3, [r4, #80]	; 0x50
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <__sinit+0x68>)
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <__sinit+0x6c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	bf04      	itt	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	61a3      	streq	r3, [r4, #24]
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f000 f820 	bl	8000d40 <__sfp>
 8000d00:	6060      	str	r0, [r4, #4]
 8000d02:	4620      	mov	r0, r4
 8000d04:	f000 f81c 	bl	8000d40 <__sfp>
 8000d08:	60a0      	str	r0, [r4, #8]
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f000 f818 	bl	8000d40 <__sfp>
 8000d10:	2200      	movs	r2, #0
 8000d12:	60e0      	str	r0, [r4, #12]
 8000d14:	2104      	movs	r1, #4
 8000d16:	6860      	ldr	r0, [r4, #4]
 8000d18:	f7ff ff82 	bl	8000c20 <std>
 8000d1c:	68a0      	ldr	r0, [r4, #8]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2109      	movs	r1, #9
 8000d22:	f7ff ff7d 	bl	8000c20 <std>
 8000d26:	68e0      	ldr	r0, [r4, #12]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	2112      	movs	r1, #18
 8000d2c:	f7ff ff78 	bl	8000c20 <std>
 8000d30:	2301      	movs	r3, #1
 8000d32:	61a3      	str	r3, [r4, #24]
 8000d34:	e7d2      	b.n	8000cdc <__sinit+0xc>
 8000d36:	bf00      	nop
 8000d38:	080012a8 	.word	0x080012a8
 8000d3c:	08000c69 	.word	0x08000c69

08000d40 <__sfp>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	4607      	mov	r7, r0
 8000d44:	f7ff ffac 	bl	8000ca0 <__sfp_lock_acquire>
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <__sfp+0x84>)
 8000d4a:	681e      	ldr	r6, [r3, #0]
 8000d4c:	69b3      	ldr	r3, [r6, #24]
 8000d4e:	b913      	cbnz	r3, 8000d56 <__sfp+0x16>
 8000d50:	4630      	mov	r0, r6
 8000d52:	f7ff ffbd 	bl	8000cd0 <__sinit>
 8000d56:	3648      	adds	r6, #72	; 0x48
 8000d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	d503      	bpl.n	8000d68 <__sfp+0x28>
 8000d60:	6833      	ldr	r3, [r6, #0]
 8000d62:	b30b      	cbz	r3, 8000da8 <__sfp+0x68>
 8000d64:	6836      	ldr	r6, [r6, #0]
 8000d66:	e7f7      	b.n	8000d58 <__sfp+0x18>
 8000d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d6c:	b9d5      	cbnz	r5, 8000da4 <__sfp+0x64>
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <__sfp+0x88>)
 8000d70:	60e3      	str	r3, [r4, #12]
 8000d72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d76:	6665      	str	r5, [r4, #100]	; 0x64
 8000d78:	f000 f847 	bl	8000e0a <__retarget_lock_init_recursive>
 8000d7c:	f7ff ff96 	bl	8000cac <__sfp_lock_release>
 8000d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d88:	6025      	str	r5, [r4, #0]
 8000d8a:	61a5      	str	r5, [r4, #24]
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	4629      	mov	r1, r5
 8000d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d94:	f7ff fd48 	bl	8000828 <memset>
 8000d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000da0:	4620      	mov	r0, r4
 8000da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da4:	3468      	adds	r4, #104	; 0x68
 8000da6:	e7d9      	b.n	8000d5c <__sfp+0x1c>
 8000da8:	2104      	movs	r1, #4
 8000daa:	4638      	mov	r0, r7
 8000dac:	f7ff ff62 	bl	8000c74 <__sfmoreglue>
 8000db0:	4604      	mov	r4, r0
 8000db2:	6030      	str	r0, [r6, #0]
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d1d5      	bne.n	8000d64 <__sfp+0x24>
 8000db8:	f7ff ff78 	bl	8000cac <__sfp_lock_release>
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	e7ee      	b.n	8000da0 <__sfp+0x60>
 8000dc2:	bf00      	nop
 8000dc4:	080012a8 	.word	0x080012a8
 8000dc8:	ffff0001 	.word	0xffff0001

08000dcc <_fwalk_reent>:
 8000dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000dd8:	2700      	movs	r7, #0
 8000dda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000dde:	f1b9 0901 	subs.w	r9, r9, #1
 8000de2:	d505      	bpl.n	8000df0 <_fwalk_reent+0x24>
 8000de4:	6824      	ldr	r4, [r4, #0]
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d1f7      	bne.n	8000dda <_fwalk_reent+0xe>
 8000dea:	4638      	mov	r0, r7
 8000dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000df0:	89ab      	ldrh	r3, [r5, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d907      	bls.n	8000e06 <_fwalk_reent+0x3a>
 8000df6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	d003      	beq.n	8000e06 <_fwalk_reent+0x3a>
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4630      	mov	r0, r6
 8000e02:	47c0      	blx	r8
 8000e04:	4307      	orrs	r7, r0
 8000e06:	3568      	adds	r5, #104	; 0x68
 8000e08:	e7e9      	b.n	8000dde <_fwalk_reent+0x12>

08000e0a <__retarget_lock_init_recursive>:
 8000e0a:	4770      	bx	lr

08000e0c <__retarget_lock_acquire_recursive>:
 8000e0c:	4770      	bx	lr

08000e0e <__retarget_lock_release_recursive>:
 8000e0e:	4770      	bx	lr

08000e10 <__swhatbuf_r>:
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	460e      	mov	r6, r1
 8000e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	b096      	sub	sp, #88	; 0x58
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	461d      	mov	r5, r3
 8000e20:	da08      	bge.n	8000e34 <__swhatbuf_r+0x24>
 8000e22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	602a      	str	r2, [r5, #0]
 8000e2a:	061a      	lsls	r2, r3, #24
 8000e2c:	d410      	bmi.n	8000e50 <__swhatbuf_r+0x40>
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	e00e      	b.n	8000e52 <__swhatbuf_r+0x42>
 8000e34:	466a      	mov	r2, sp
 8000e36:	f000 f9a5 	bl	8001184 <_fstat_r>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	dbf1      	blt.n	8000e22 <__swhatbuf_r+0x12>
 8000e3e:	9a01      	ldr	r2, [sp, #4]
 8000e40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e48:	425a      	negs	r2, r3
 8000e4a:	415a      	adcs	r2, r3
 8000e4c:	602a      	str	r2, [r5, #0]
 8000e4e:	e7ee      	b.n	8000e2e <__swhatbuf_r+0x1e>
 8000e50:	2340      	movs	r3, #64	; 0x40
 8000e52:	2000      	movs	r0, #0
 8000e54:	6023      	str	r3, [r4, #0]
 8000e56:	b016      	add	sp, #88	; 0x58
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e5c <__smakebuf_r>:
 8000e5c:	898b      	ldrh	r3, [r1, #12]
 8000e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e60:	079d      	lsls	r5, r3, #30
 8000e62:	4606      	mov	r6, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	d507      	bpl.n	8000e78 <__smakebuf_r+0x1c>
 8000e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	6123      	str	r3, [r4, #16]
 8000e70:	2301      	movs	r3, #1
 8000e72:	6163      	str	r3, [r4, #20]
 8000e74:	b002      	add	sp, #8
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	ab01      	add	r3, sp, #4
 8000e7a:	466a      	mov	r2, sp
 8000e7c:	f7ff ffc8 	bl	8000e10 <__swhatbuf_r>
 8000e80:	9900      	ldr	r1, [sp, #0]
 8000e82:	4605      	mov	r5, r0
 8000e84:	4630      	mov	r0, r6
 8000e86:	f000 f893 	bl	8000fb0 <_malloc_r>
 8000e8a:	b948      	cbnz	r0, 8000ea0 <__smakebuf_r+0x44>
 8000e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e90:	059a      	lsls	r2, r3, #22
 8000e92:	d4ef      	bmi.n	8000e74 <__smakebuf_r+0x18>
 8000e94:	f023 0303 	bic.w	r3, r3, #3
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	81a3      	strh	r3, [r4, #12]
 8000e9e:	e7e3      	b.n	8000e68 <__smakebuf_r+0xc>
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <__smakebuf_r+0x7c>)
 8000ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ea4:	89a3      	ldrh	r3, [r4, #12]
 8000ea6:	6020      	str	r0, [r4, #0]
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	81a3      	strh	r3, [r4, #12]
 8000eae:	9b00      	ldr	r3, [sp, #0]
 8000eb0:	6163      	str	r3, [r4, #20]
 8000eb2:	9b01      	ldr	r3, [sp, #4]
 8000eb4:	6120      	str	r0, [r4, #16]
 8000eb6:	b15b      	cbz	r3, 8000ed0 <__smakebuf_r+0x74>
 8000eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	f000 f973 	bl	80011a8 <_isatty_r>
 8000ec2:	b128      	cbz	r0, 8000ed0 <__smakebuf_r+0x74>
 8000ec4:	89a3      	ldrh	r3, [r4, #12]
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	81a3      	strh	r3, [r4, #12]
 8000ed0:	89a0      	ldrh	r0, [r4, #12]
 8000ed2:	4305      	orrs	r5, r0
 8000ed4:	81a5      	strh	r5, [r4, #12]
 8000ed6:	e7cd      	b.n	8000e74 <__smakebuf_r+0x18>
 8000ed8:	08000c69 	.word	0x08000c69

08000edc <_free_r>:
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4605      	mov	r5, r0
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	d041      	beq.n	8000f68 <_free_r+0x8c>
 8000ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ee8:	1f0c      	subs	r4, r1, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bfb8      	it	lt
 8000eee:	18e4      	addlt	r4, r4, r3
 8000ef0:	f000 f97c 	bl	80011ec <__malloc_lock>
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <_free_r+0x90>)
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	b933      	cbnz	r3, 8000f08 <_free_r+0x2c>
 8000efa:	6063      	str	r3, [r4, #4]
 8000efc:	6014      	str	r4, [r2, #0]
 8000efe:	4628      	mov	r0, r5
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b978 	b.w	80011f8 <__malloc_unlock>
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <_free_r+0x42>
 8000f0c:	6820      	ldr	r0, [r4, #0]
 8000f0e:	1821      	adds	r1, r4, r0
 8000f10:	428b      	cmp	r3, r1
 8000f12:	bf01      	itttt	eq
 8000f14:	6819      	ldreq	r1, [r3, #0]
 8000f16:	685b      	ldreq	r3, [r3, #4]
 8000f18:	1809      	addeq	r1, r1, r0
 8000f1a:	6021      	streq	r1, [r4, #0]
 8000f1c:	e7ed      	b.n	8000efa <_free_r+0x1e>
 8000f1e:	461a      	mov	r2, r3
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	b10b      	cbz	r3, 8000f28 <_free_r+0x4c>
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d9fa      	bls.n	8000f1e <_free_r+0x42>
 8000f28:	6811      	ldr	r1, [r2, #0]
 8000f2a:	1850      	adds	r0, r2, r1
 8000f2c:	42a0      	cmp	r0, r4
 8000f2e:	d10b      	bne.n	8000f48 <_free_r+0x6c>
 8000f30:	6820      	ldr	r0, [r4, #0]
 8000f32:	4401      	add	r1, r0
 8000f34:	1850      	adds	r0, r2, r1
 8000f36:	4283      	cmp	r3, r0
 8000f38:	6011      	str	r1, [r2, #0]
 8000f3a:	d1e0      	bne.n	8000efe <_free_r+0x22>
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	6053      	str	r3, [r2, #4]
 8000f42:	4401      	add	r1, r0
 8000f44:	6011      	str	r1, [r2, #0]
 8000f46:	e7da      	b.n	8000efe <_free_r+0x22>
 8000f48:	d902      	bls.n	8000f50 <_free_r+0x74>
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	e7d6      	b.n	8000efe <_free_r+0x22>
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	1821      	adds	r1, r4, r0
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf04      	itt	eq
 8000f58:	6819      	ldreq	r1, [r3, #0]
 8000f5a:	685b      	ldreq	r3, [r3, #4]
 8000f5c:	6063      	str	r3, [r4, #4]
 8000f5e:	bf04      	itt	eq
 8000f60:	1809      	addeq	r1, r1, r0
 8000f62:	6021      	streq	r1, [r4, #0]
 8000f64:	6054      	str	r4, [r2, #4]
 8000f66:	e7ca      	b.n	8000efe <_free_r+0x22>
 8000f68:	bd38      	pop	{r3, r4, r5, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000cc 	.word	0x200000cc

08000f70 <sbrk_aligned>:
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	4e0e      	ldr	r6, [pc, #56]	; (8000fac <sbrk_aligned+0x3c>)
 8000f74:	460c      	mov	r4, r1
 8000f76:	6831      	ldr	r1, [r6, #0]
 8000f78:	4605      	mov	r5, r0
 8000f7a:	b911      	cbnz	r1, 8000f82 <sbrk_aligned+0x12>
 8000f7c:	f000 f88c 	bl	8001098 <_sbrk_r>
 8000f80:	6030      	str	r0, [r6, #0]
 8000f82:	4621      	mov	r1, r4
 8000f84:	4628      	mov	r0, r5
 8000f86:	f000 f887 	bl	8001098 <_sbrk_r>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	d00a      	beq.n	8000fa4 <sbrk_aligned+0x34>
 8000f8e:	1cc4      	adds	r4, r0, #3
 8000f90:	f024 0403 	bic.w	r4, r4, #3
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d007      	beq.n	8000fa8 <sbrk_aligned+0x38>
 8000f98:	1a21      	subs	r1, r4, r0
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f000 f87c 	bl	8001098 <_sbrk_r>
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d101      	bne.n	8000fa8 <sbrk_aligned+0x38>
 8000fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8000fa8:	4620      	mov	r0, r4
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
 8000fac:	200000d0 	.word	0x200000d0

08000fb0 <_malloc_r>:
 8000fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb4:	1ccd      	adds	r5, r1, #3
 8000fb6:	f025 0503 	bic.w	r5, r5, #3
 8000fba:	3508      	adds	r5, #8
 8000fbc:	2d0c      	cmp	r5, #12
 8000fbe:	bf38      	it	cc
 8000fc0:	250c      	movcc	r5, #12
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	4607      	mov	r7, r0
 8000fc6:	db01      	blt.n	8000fcc <_malloc_r+0x1c>
 8000fc8:	42a9      	cmp	r1, r5
 8000fca:	d905      	bls.n	8000fd8 <_malloc_r+0x28>
 8000fcc:	230c      	movs	r3, #12
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fd8:	4e2e      	ldr	r6, [pc, #184]	; (8001094 <_malloc_r+0xe4>)
 8000fda:	f000 f907 	bl	80011ec <__malloc_lock>
 8000fde:	6833      	ldr	r3, [r6, #0]
 8000fe0:	461c      	mov	r4, r3
 8000fe2:	bb34      	cbnz	r4, 8001032 <_malloc_r+0x82>
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	f7ff ffc2 	bl	8000f70 <sbrk_aligned>
 8000fec:	1c43      	adds	r3, r0, #1
 8000fee:	4604      	mov	r4, r0
 8000ff0:	d14d      	bne.n	800108e <_malloc_r+0xde>
 8000ff2:	6834      	ldr	r4, [r6, #0]
 8000ff4:	4626      	mov	r6, r4
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d140      	bne.n	800107c <_malloc_r+0xcc>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	4638      	mov	r0, r7
 8001000:	eb04 0803 	add.w	r8, r4, r3
 8001004:	f000 f848 	bl	8001098 <_sbrk_r>
 8001008:	4580      	cmp	r8, r0
 800100a:	d13a      	bne.n	8001082 <_malloc_r+0xd2>
 800100c:	6821      	ldr	r1, [r4, #0]
 800100e:	3503      	adds	r5, #3
 8001010:	1a6d      	subs	r5, r5, r1
 8001012:	f025 0503 	bic.w	r5, r5, #3
 8001016:	3508      	adds	r5, #8
 8001018:	2d0c      	cmp	r5, #12
 800101a:	bf38      	it	cc
 800101c:	250c      	movcc	r5, #12
 800101e:	4629      	mov	r1, r5
 8001020:	4638      	mov	r0, r7
 8001022:	f7ff ffa5 	bl	8000f70 <sbrk_aligned>
 8001026:	3001      	adds	r0, #1
 8001028:	d02b      	beq.n	8001082 <_malloc_r+0xd2>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	442b      	add	r3, r5
 800102e:	6023      	str	r3, [r4, #0]
 8001030:	e00e      	b.n	8001050 <_malloc_r+0xa0>
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	1b52      	subs	r2, r2, r5
 8001036:	d41e      	bmi.n	8001076 <_malloc_r+0xc6>
 8001038:	2a0b      	cmp	r2, #11
 800103a:	d916      	bls.n	800106a <_malloc_r+0xba>
 800103c:	1961      	adds	r1, r4, r5
 800103e:	42a3      	cmp	r3, r4
 8001040:	6025      	str	r5, [r4, #0]
 8001042:	bf18      	it	ne
 8001044:	6059      	strne	r1, [r3, #4]
 8001046:	6863      	ldr	r3, [r4, #4]
 8001048:	bf08      	it	eq
 800104a:	6031      	streq	r1, [r6, #0]
 800104c:	5162      	str	r2, [r4, r5]
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	4638      	mov	r0, r7
 8001052:	f104 060b 	add.w	r6, r4, #11
 8001056:	f000 f8cf 	bl	80011f8 <__malloc_unlock>
 800105a:	f026 0607 	bic.w	r6, r6, #7
 800105e:	1d23      	adds	r3, r4, #4
 8001060:	1af2      	subs	r2, r6, r3
 8001062:	d0b6      	beq.n	8000fd2 <_malloc_r+0x22>
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	50a3      	str	r3, [r4, r2]
 8001068:	e7b3      	b.n	8000fd2 <_malloc_r+0x22>
 800106a:	6862      	ldr	r2, [r4, #4]
 800106c:	42a3      	cmp	r3, r4
 800106e:	bf0c      	ite	eq
 8001070:	6032      	streq	r2, [r6, #0]
 8001072:	605a      	strne	r2, [r3, #4]
 8001074:	e7ec      	b.n	8001050 <_malloc_r+0xa0>
 8001076:	4623      	mov	r3, r4
 8001078:	6864      	ldr	r4, [r4, #4]
 800107a:	e7b2      	b.n	8000fe2 <_malloc_r+0x32>
 800107c:	4634      	mov	r4, r6
 800107e:	6876      	ldr	r6, [r6, #4]
 8001080:	e7b9      	b.n	8000ff6 <_malloc_r+0x46>
 8001082:	230c      	movs	r3, #12
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4638      	mov	r0, r7
 8001088:	f000 f8b6 	bl	80011f8 <__malloc_unlock>
 800108c:	e7a1      	b.n	8000fd2 <_malloc_r+0x22>
 800108e:	6025      	str	r5, [r4, #0]
 8001090:	e7de      	b.n	8001050 <_malloc_r+0xa0>
 8001092:	bf00      	nop
 8001094:	200000cc 	.word	0x200000cc

08001098 <_sbrk_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4d06      	ldr	r5, [pc, #24]	; (80010b4 <_sbrk_r+0x1c>)
 800109c:	2300      	movs	r3, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	f7ff fb36 	bl	8000714 <_sbrk>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_sbrk_r+0x1a>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_sbrk_r+0x1a>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	200000d4 	.word	0x200000d4

080010b8 <__sread>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	460c      	mov	r4, r1
 80010bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c0:	f000 f8a0 	bl	8001204 <_read_r>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	bfab      	itete	ge
 80010c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010ca:	89a3      	ldrhlt	r3, [r4, #12]
 80010cc:	181b      	addge	r3, r3, r0
 80010ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010d2:	bfac      	ite	ge
 80010d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80010d6:	81a3      	strhlt	r3, [r4, #12]
 80010d8:	bd10      	pop	{r4, pc}

080010da <__swrite>:
 80010da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010de:	461f      	mov	r7, r3
 80010e0:	898b      	ldrh	r3, [r1, #12]
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	4605      	mov	r5, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	4616      	mov	r6, r2
 80010ea:	d505      	bpl.n	80010f8 <__swrite+0x1e>
 80010ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f0:	2302      	movs	r3, #2
 80010f2:	2200      	movs	r2, #0
 80010f4:	f000 f868 	bl	80011c8 <_lseek_r>
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001102:	81a3      	strh	r3, [r4, #12]
 8001104:	4632      	mov	r2, r6
 8001106:	463b      	mov	r3, r7
 8001108:	4628      	mov	r0, r5
 800110a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800110e:	f000 b817 	b.w	8001140 <_write_r>

08001112 <__sseek>:
 8001112:	b510      	push	{r4, lr}
 8001114:	460c      	mov	r4, r1
 8001116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800111a:	f000 f855 	bl	80011c8 <_lseek_r>
 800111e:	1c43      	adds	r3, r0, #1
 8001120:	89a3      	ldrh	r3, [r4, #12]
 8001122:	bf15      	itete	ne
 8001124:	6560      	strne	r0, [r4, #84]	; 0x54
 8001126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800112a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800112e:	81a3      	strheq	r3, [r4, #12]
 8001130:	bf18      	it	ne
 8001132:	81a3      	strhne	r3, [r4, #12]
 8001134:	bd10      	pop	{r4, pc}

08001136 <__sclose>:
 8001136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113a:	f000 b813 	b.w	8001164 <_close_r>
	...

08001140 <_write_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4d07      	ldr	r5, [pc, #28]	; (8001160 <_write_r+0x20>)
 8001144:	4604      	mov	r4, r0
 8001146:	4608      	mov	r0, r1
 8001148:	4611      	mov	r1, r2
 800114a:	2200      	movs	r2, #0
 800114c:	602a      	str	r2, [r5, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f7ff fa93 	bl	800067a <_write>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	d102      	bne.n	800115e <_write_r+0x1e>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	b103      	cbz	r3, 800115e <_write_r+0x1e>
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	200000d4 	.word	0x200000d4

08001164 <_close_r>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4d06      	ldr	r5, [pc, #24]	; (8001180 <_close_r+0x1c>)
 8001168:	2300      	movs	r3, #0
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	602b      	str	r3, [r5, #0]
 8001170:	f7ff fa9f 	bl	80006b2 <_close>
 8001174:	1c43      	adds	r3, r0, #1
 8001176:	d102      	bne.n	800117e <_close_r+0x1a>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	b103      	cbz	r3, 800117e <_close_r+0x1a>
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
 8001180:	200000d4 	.word	0x200000d4

08001184 <_fstat_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4d07      	ldr	r5, [pc, #28]	; (80011a4 <_fstat_r+0x20>)
 8001188:	2300      	movs	r3, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	602b      	str	r3, [r5, #0]
 8001192:	f7ff fa99 	bl	80006c8 <_fstat>
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	d102      	bne.n	80011a0 <_fstat_r+0x1c>
 800119a:	682b      	ldr	r3, [r5, #0]
 800119c:	b103      	cbz	r3, 80011a0 <_fstat_r+0x1c>
 800119e:	6023      	str	r3, [r4, #0]
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop
 80011a4:	200000d4 	.word	0x200000d4

080011a8 <_isatty_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d06      	ldr	r5, [pc, #24]	; (80011c4 <_isatty_r+0x1c>)
 80011ac:	2300      	movs	r3, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	602b      	str	r3, [r5, #0]
 80011b4:	f7ff fa97 	bl	80006e6 <_isatty>
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	d102      	bne.n	80011c2 <_isatty_r+0x1a>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	b103      	cbz	r3, 80011c2 <_isatty_r+0x1a>
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	200000d4 	.word	0x200000d4

080011c8 <_lseek_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4d07      	ldr	r5, [pc, #28]	; (80011e8 <_lseek_r+0x20>)
 80011cc:	4604      	mov	r4, r0
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	2200      	movs	r2, #0
 80011d4:	602a      	str	r2, [r5, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	f7ff fa8f 	bl	80006fa <_lseek>
 80011dc:	1c43      	adds	r3, r0, #1
 80011de:	d102      	bne.n	80011e6 <_lseek_r+0x1e>
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	b103      	cbz	r3, 80011e6 <_lseek_r+0x1e>
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
 80011e8:	200000d4 	.word	0x200000d4

080011ec <__malloc_lock>:
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <__malloc_lock+0x8>)
 80011ee:	f7ff be0d 	b.w	8000e0c <__retarget_lock_acquire_recursive>
 80011f2:	bf00      	nop
 80011f4:	200000c8 	.word	0x200000c8

080011f8 <__malloc_unlock>:
 80011f8:	4801      	ldr	r0, [pc, #4]	; (8001200 <__malloc_unlock+0x8>)
 80011fa:	f7ff be08 	b.w	8000e0e <__retarget_lock_release_recursive>
 80011fe:	bf00      	nop
 8001200:	200000c8 	.word	0x200000c8

08001204 <_read_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4d07      	ldr	r5, [pc, #28]	; (8001224 <_read_r+0x20>)
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	2200      	movs	r2, #0
 8001210:	602a      	str	r2, [r5, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	f7ff fa14 	bl	8000640 <_read>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_read_r+0x1e>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	b103      	cbz	r3, 8001222 <_read_r+0x1e>
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	200000d4 	.word	0x200000d4

08001228 <_init>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	bf00      	nop
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr

08001234 <_fini>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	bf00      	nop
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr
