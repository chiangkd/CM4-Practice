
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010330  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001a6  00000000  00000000  0001035a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000e5  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  000105e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  00010668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ce6  00000000  00000000  000106d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000069f  00000000  00000000  000123b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007cf8  00000000  00000000  00012a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a74d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000120  00000000  00000000  0001a7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000310 	.word	0x08000310

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000310 	.word	0x08000310

080001d4 <main>:
#define HSI_CLOCK			8000000U	// rm 9.2 clock
#define SYSTICK_TIM_CLK 	HSI_CLOCK


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <main+0x14>)
 80001da:	f000 f83f 	bl	800025c <init_scheduler_stack>
    init_systick_timer(TICK_HZ);
 80001de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e2:	f000 f803 	bl	80001ec <init_systick_timer>
	for(;;);
 80001e6:	e7fe      	b.n	80001e6 <main+0x12>
 80001e8:	2001f000 	.word	0x2001f000

080001ec <init_systick_timer>:
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
 80001f4:	4b16      	ldr	r3, [pc, #88]	; (8000250 <init_systick_timer+0x64>)
 80001f6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <init_systick_timer+0x68>)
 80001fa:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1
 80001fc:	4a16      	ldr	r2, [pc, #88]	; (8000258 <init_systick_timer+0x6c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fbb2 f3f3 	udiv	r3, r2, r3
 8000204:	3b01      	subs	r3, #1
 8000206:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	601a      	str	r2, [r3, #0]

	// load the value in to SVR
	*pSRVR |= count_value;
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	431a      	orrs	r2, r3
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f043 0202 	orr.w	r2, r3, #2
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f043 0204 	orr.w	r2, r3, #4
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	601a      	str	r2, [r3, #0]

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f043 0201 	orr.w	r2, r3, #1
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	601a      	str	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	371c      	adds	r7, #28
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e014 	.word	0xe000e014
 8000254:	e000e010 	.word	0xe000e010
 8000258:	007a1200 	.word	0x007a1200

0800025c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800025c:	4603      	mov	r3, r0
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
 800025e:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");	// go back to main function
 8000262:	4770      	bx	lr
}
 8000264:	bf00      	nop

08000266 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000266:	b480      	push	{r7}
 8000268:	af00      	add	r7, sp, #0

}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
	...

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ff95 	bl	80001d4 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4d0d      	ldr	r5, [pc, #52]	; (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2600      	movs	r6, #0
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4d0b      	ldr	r5, [pc, #44]	; (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	; (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2600      	movs	r6, #0
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
