
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080012cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d53  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c6  00000000  00000000  00020df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000212b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  00021488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf6  00000000  00000000  00021610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000195d  00000000  00000000  00024306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009797  00000000  00000000  00025c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f3fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c98  00000000  00000000  0002f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080011e0 	.word	0x080011e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080011e0 	.word	0x080011e0

080001d4 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d3f8      	bcc.n	80001e2 <delay+0xe>
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <led_init_all>:

void led_init_all(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	uint32_t *pAHB = (uint32_t*)0x40021014; // AHB base 0x40021000 + offset 0x14
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <led_init_all+0x60>)
 8000204:	607b      	str	r3, [r7, #4]
	*pAHB |= (1 << 18);	// GPIOB enable
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]

	uint32_t *pGPIOBMode = (uint32_t*)0x48000400;	// GPIOB base 0x48000400 + offset 0x00
 8000212:	4b13      	ldr	r3, [pc, #76]	; (8000260 <led_init_all+0x64>)
 8000214:	603b      	str	r3, [r7, #0]


	// configure LEDs
	*pGPIOBMode &= ~(3 << (2 * LED_BLUE));	// initializer gpiob 7 as 00 at 14th and 15th bit
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	601a      	str	r2, [r3, #0]
	*pGPIOBMode |= 1 << (2 * LED_BLUE);	// set gpiob 7 as 01 at 14th and 15th bit
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	601a      	str	r2, [r3, #0]

	*pGPIOBMode &= ~(3 << (2 * LED_RED));	// initializer gpiob 14 as 00 at 14th and 15th bit
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGPIOBMode |= 1 << (2 * LED_RED);	// set gpiob 14 as 01 at 14th and 15th bit
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_RED);
 8000246:	200e      	movs	r0, #14
 8000248:	f000 f824 	bl	8000294 <led_off>
    led_off(LED_BLUE);
 800024c:	2007      	movs	r0, #7
 800024e:	f000 f821 	bl	8000294 <led_off>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021014 	.word	0x40021014
 8000260:	48000400 	.word	0x48000400

08000264 <led_on>:

void led_on(uint8_t led_no)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOBODR = (uint32_t*)0x48000414;	// GPIOB base 0x48000400 + offset 0x14
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <led_on+0x2c>)
 8000270:	60fb      	str	r3, [r7, #12]
	*pGPIOBODR |= ( 1 << led_no);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]

}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	48000414 	.word	0x48000414

08000294 <led_off>:

void led_off(uint8_t led_no)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGPIOBODR = (uint32_t*)0x48000414;	// GPIOB base 0x48000400 + offset 0x14
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <led_off+0x2c>)
 80002a0:	60fb      	str	r3, [r7, #12]
	*pGPIOBODR &= ~( 1 << led_no);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	48000414 	.word	0x48000414

080002c4 <main>:
uint8_t current_task = 0;	// value = 0 means task1 is running



int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	// we are dealing with stack memory and we may
	// be touching or we may doing some illegal activities related to memory
	// or inline assembly or whatever it could be, or there may be fault while changing from
	// handler to thread mode or something like that.
	// In order to trace the fault!
	enable_processor_faults();
 80002c8:	f000 f8e0 	bl	800048c <enable_processor_faults>

	/* here use MSP as stack pointer by default */

	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <main+0x40>)
 80002ce:	f000 f891 	bl	80003f4 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80002d2:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <main+0x44>)
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <main+0x48>)
 80002d6:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <main+0x4c>)
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <main+0x48>)
 80002dc:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <main+0x50>)
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <main+0x48>)
 80002e2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80002e4:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <main+0x54>)
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <main+0x48>)
 80002e8:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80002ea:	f000 f889 	bl	8000400 <init_tasks_stack>

	led_init_all();	// initializa all LEDs
 80002ee:	f7ff ff85 	bl	80001fc <led_init_all>

	init_systick_timer(TICK_HZ);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f000 f845 	bl	8000384 <init_systick_timer>

	/* before call task1_handler, need to transfer to PSP as stack pointer */
	switch_sp_to_psp();
 80002fa:	f000 f91f 	bl	800053c <switch_sp_to_psp>

	task1_handler();
 80002fe:	f000 f80d 	bl	800031c <task1_handler>

	for(;;);
 8000302:	e7fe      	b.n	8000302 <main+0x3e>
 8000304:	2000f000 	.word	0x2000f000
 8000308:	0800031d 	.word	0x0800031d
 800030c:	20000090 	.word	0x20000090
 8000310:	08000341 	.word	0x08000341
 8000314:	08000365 	.word	0x08000365
 8000318:	08000375 	.word	0x08000375

0800031c <task1_handler>:
}

void task1_handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	while(1)
	{
//		printf("This is task1\n");
		led_on(LED_BLUE);
 8000320:	2007      	movs	r0, #7
 8000322:	f7ff ff9f 	bl	8000264 <led_on>
		delay(DELAY_COUNT_1S);
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <task1_handler+0x20>)
 8000328:	f7ff ff54 	bl	80001d4 <delay>
		led_off(LED_BLUE);
 800032c:	2007      	movs	r0, #7
 800032e:	f7ff ffb1 	bl	8000294 <led_off>
		delay(DELAY_COUNT_1S);
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <task1_handler+0x20>)
 8000334:	f7ff ff4e 	bl	80001d4 <delay>
		led_on(LED_BLUE);
 8000338:	e7f2      	b.n	8000320 <task1_handler+0x4>
 800033a:	bf00      	nop
 800033c:	001312d0 	.word	0x001312d0

08000340 <task2_handler>:
	}
}
void task2_handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1)
	{
//		printf("This is task2\n");
		led_on(LED_RED);
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff8d 	bl	8000264 <led_on>
		delay(DELAY_COUNT_500MS);
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <task2_handler+0x20>)
 800034c:	f7ff ff42 	bl	80001d4 <delay>
		led_off(LED_RED);
 8000350:	200e      	movs	r0, #14
 8000352:	f7ff ff9f 	bl	8000294 <led_off>
		delay(DELAY_COUNT_500MS);
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <task2_handler+0x20>)
 8000358:	f7ff ff3c 	bl	80001d4 <delay>
		led_on(LED_RED);
 800035c:	e7f2      	b.n	8000344 <task2_handler+0x4>
 800035e:	bf00      	nop
 8000360:	00098968 	.word	0x00098968

08000364 <task3_handler>:
	}
}
void task3_handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task3\n");
 8000368:	4801      	ldr	r0, [pc, #4]	; (8000370 <task3_handler+0xc>)
 800036a:	f000 faaf 	bl	80008cc <puts>
 800036e:	e7fb      	b.n	8000368 <task3_handler+0x4>
 8000370:	080011f8 	.word	0x080011f8

08000374 <task4_handler>:
	}
}
void task4_handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
while(1)
	{
		printf("This is task4\n");
 8000378:	4801      	ldr	r0, [pc, #4]	; (8000380 <task4_handler+0xc>)
 800037a:	f000 faa7 	bl	80008cc <puts>
 800037e:	e7fb      	b.n	8000378 <task4_handler+0x4>
 8000380:	08001208 	.word	0x08001208

08000384 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <init_systick_timer+0x64>)
 800038e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <init_systick_timer+0x68>)
 8000392:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1
 8000394:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <init_systick_timer+0x6c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	fbb2 f3f3 	udiv	r3, r2, r3
 800039c:	3b01      	subs	r3, #1
 800039e:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	601a      	str	r2, [r3, #0]

	// load the value in to SVR
	*pSRVR |= count_value;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f043 0202 	orr.w	r2, r3, #2
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f043 0204 	orr.w	r2, r3, #4
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	601a      	str	r2, [r3, #0]

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	371c      	adds	r7, #28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e014 	.word	0xe000e014
 80003ec:	e000e010 	.word	0xe000e010
 80003f0:	007a1200 	.word	0x007a1200

080003f4 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003f4:	4603      	mov	r3, r0
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
 80003f6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");	// go back to main function
 80003fa:	4770      	bx	lr
}
 80003fc:	bf00      	nop
	...

08000400 <init_tasks_stack>:



void init_tasks_stack(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	e032      	b.n	8000472 <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <init_tasks_stack+0x84>)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	60fb      	str	r3, [r7, #12]

		/* fully descending */
		pPSP--;	// xPSR
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3b04      	subs	r3, #4
 800041a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;	// 0x00100000
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000422:	601a      	str	r2, [r3, #0]

		pPSP--;	// PC
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3b04      	subs	r3, #4
 8000428:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <init_tasks_stack+0x88>)
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]

		pPSP--;	// LR
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3b04      	subs	r3, #4
 800043a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f06f 0202 	mvn.w	r2, #2
 8000442:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++){
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	e008      	b.n	800045c <init_tasks_stack+0x5c>
			pPSP--;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3b04      	subs	r3, #4
 800044e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0; // from R12 to R4
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3301      	adds	r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b0c      	cmp	r3, #12
 8000460:	ddf3      	ble.n	800044a <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP; // preserve the PSP value, very important
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4907      	ldr	r1, [pc, #28]	; (8000484 <init_tasks_stack+0x84>)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	3301      	adds	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	2b03      	cmp	r3, #3
 8000476:	ddc9      	ble.n	800040c <init_tasks_stack+0xc>
	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000000 	.word	0x20000000
 8000488:	20000090 	.word	0x20000090

0800048c <enable_processor_faults>:

void enable_processor_faults(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
	uint32_t *pSHCRS = (uint32_t*)0xE000ED24;
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <enable_processor_faults+0x38>)
 8000494:	607b      	str	r3, [r7, #4]

	*pSHCRS |= ( 1 << 16); // mem manage
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
	*pSHCRS |= ( 1 << 17); // bus fault
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
	*pSHCRS |= ( 1 << 18); // usage fault
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	e000ed24 	.word	0xe000ed24

080004c8 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <save_psp_value+0x20>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <save_psp_value+0x24>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	200000a0 	.word	0x200000a0
 80004ec:	20000000 	.word	0x20000000

080004f0 <update_next_task>:

void update_next_task(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	current_task++;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <update_next_task+0x28>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <update_next_task+0x28>)
 80004fe:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;	// 0 -> 1 -> 2 -> 3 -> 0 ...
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <update_next_task+0x28>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f003 0303 	and.w	r3, r3, #3
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <update_next_task+0x28>)
 800050c:	701a      	strb	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000a0 	.word	0x200000a0

0800051c <get_psp_value>:


uint32_t get_psp_value(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <get_psp_value+0x18>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <get_psp_value+0x1c>)
 8000528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	200000a0 	.word	0x200000a0
 8000538:	20000000 	.word	0x20000000

0800053c <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)	// change SP to PSP need inline assembly "MRS"
{
	// 1. initializer the PSP with TASK1 stack start

	// get the value of PSP of current_task
	__asm volatile ("PUSH {LR}");	// preserve LR which connects back to main
 800053c:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");	// the code will branch to get_psp_value
 800053e:	f7ff ffed 	bl	800051c <get_psp_value>
	__asm volatile ("MSR PSP,R0");	// initialize PSP
 8000542:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");	// pops back LR value
 8000546:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");	// use MOV instruction to store some immediate value
 800054a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");	// push R0 to CONTROL register
 800054e:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000552:	4770      	bx	lr
}
 8000554:	bf00      	nop

08000556 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task */
	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
 8000556:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile ("STMDB R0!,{R4-R11}");
 800055a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile ("PUSH {LR}");	// save LR value
 800055e:	b500      	push	{lr}

	// 3. Save the current of PSP
	__asm volatile ("BL save_psp_value");	//LR will going to change here
 8000560:	f7ff ffb2 	bl	80004c8 <save_psp_value>


	/* Retrieve the context of next task */
	// 1. Decide next task to run

	__asm volatile ("BL update_next_task");	//LR will going to change here
 8000564:	f7ff ffc4 	bl	80004f0 <update_next_task>

	// 2. get its past PSP value
	__asm volatile ("BL get_psp_value");	//LR will going to change here
 8000568:	f7ff ffd8 	bl	800051c <get_psp_value>

	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDM R0!, {R4-R11}");
 800056c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. update PSP and exit
	__asm volatile ("MSR PSP, R0");
 8000570:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");	// retrieve LR value
 8000574:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");	// write exception exit manually.
 8000578:	4770      	bx	lr
}
 800057a:	bf00      	nop

0800057c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000580:	4801      	ldr	r0, [pc, #4]	; (8000588 <HardFault_Handler+0xc>)
 8000582:	f000 f9a3 	bl	80008cc <puts>
	while(1);	// hang
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler+0xa>
 8000588:	08001218 	.word	0x08001218

0800058c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <MemManage_Handler+0xc>)
 8000592:	f000 f99b 	bl	80008cc <puts>
	while(1);	// hang
 8000596:	e7fe      	b.n	8000596 <MemManage_Handler+0xa>
 8000598:	08001230 	.word	0x08001230

0800059c <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80005a0:	4801      	ldr	r0, [pc, #4]	; (80005a8 <BusFault_Handler+0xc>)
 80005a2:	f000 f993 	bl	80008cc <puts>
	while(1);	// hang
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0xa>
 80005a8:	08001248 	.word	0x08001248

080005ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <ITM_SendChar+0x44>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <ITM_SendChar+0x44>)
 80005bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <ITM_SendChar+0x48>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <ITM_SendChar+0x48>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005ce:	bf00      	nop
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f8      	beq.n	80005d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000edfc 	.word	0xe000edfc
 80005f4:	e0000e00 	.word	0xe0000e00

080005f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e00a      	b.n	8000620 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800060a:	f3af 8000 	nop.w
 800060e:	4601      	mov	r1, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	b2ca      	uxtb	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf0      	blt.n	800060a <_read+0x12>
	}

return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffad 	bl	80005ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x12>
	}
	return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_close>:

int _close(int file)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000690:	605a      	str	r2, [r3, #4]
	return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f000 f846 	bl	800078c <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20010000 	.word	0x20010000
 800072c:	00000400 	.word	0x00000400
 8000730:	200000a4 	.word	0x200000a4
 8000734:	200000b8 	.word	0x200000b8

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 f817 	bl	8000798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fdab 	bl	80002c4 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800077c:	080012cc 	.word	0x080012cc
  ldr r2, =_sbss
 8000780:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000784:	200000b8 	.word	0x200000b8

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <__errno>:
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <__errno+0x8>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000010 	.word	0x20000010

08000798 <__libc_init_array>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4d0d      	ldr	r5, [pc, #52]	; (80007d0 <__libc_init_array+0x38>)
 800079c:	4c0d      	ldr	r4, [pc, #52]	; (80007d4 <__libc_init_array+0x3c>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	2600      	movs	r6, #0
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d109      	bne.n	80007bc <__libc_init_array+0x24>
 80007a8:	4d0b      	ldr	r5, [pc, #44]	; (80007d8 <__libc_init_array+0x40>)
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <__libc_init_array+0x44>)
 80007ac:	f000 fd18 	bl	80011e0 <_init>
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	2600      	movs	r6, #0
 80007b6:	42a6      	cmp	r6, r4
 80007b8:	d105      	bne.n	80007c6 <__libc_init_array+0x2e>
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c0:	4798      	blx	r3
 80007c2:	3601      	adds	r6, #1
 80007c4:	e7ee      	b.n	80007a4 <__libc_init_array+0xc>
 80007c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ca:	4798      	blx	r3
 80007cc:	3601      	adds	r6, #1
 80007ce:	e7f2      	b.n	80007b6 <__libc_init_array+0x1e>
 80007d0:	080012c4 	.word	0x080012c4
 80007d4:	080012c4 	.word	0x080012c4
 80007d8:	080012c4 	.word	0x080012c4
 80007dc:	080012c8 	.word	0x080012c8

080007e0 <memset>:
 80007e0:	4402      	add	r2, r0
 80007e2:	4603      	mov	r3, r0
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d100      	bne.n	80007ea <memset+0xa>
 80007e8:	4770      	bx	lr
 80007ea:	f803 1b01 	strb.w	r1, [r3], #1
 80007ee:	e7f9      	b.n	80007e4 <memset+0x4>

080007f0 <_puts_r>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	460e      	mov	r6, r1
 80007f4:	4605      	mov	r5, r0
 80007f6:	b118      	cbz	r0, 8000800 <_puts_r+0x10>
 80007f8:	6983      	ldr	r3, [r0, #24]
 80007fa:	b90b      	cbnz	r3, 8000800 <_puts_r+0x10>
 80007fc:	f000 fa44 	bl	8000c88 <__sinit>
 8000800:	69ab      	ldr	r3, [r5, #24]
 8000802:	68ac      	ldr	r4, [r5, #8]
 8000804:	b913      	cbnz	r3, 800080c <_puts_r+0x1c>
 8000806:	4628      	mov	r0, r5
 8000808:	f000 fa3e 	bl	8000c88 <__sinit>
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <_puts_r+0xd0>)
 800080e:	429c      	cmp	r4, r3
 8000810:	d120      	bne.n	8000854 <_puts_r+0x64>
 8000812:	686c      	ldr	r4, [r5, #4]
 8000814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000816:	07db      	lsls	r3, r3, #31
 8000818:	d405      	bmi.n	8000826 <_puts_r+0x36>
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	0598      	lsls	r0, r3, #22
 800081e:	d402      	bmi.n	8000826 <_puts_r+0x36>
 8000820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000822:	f000 facf 	bl	8000dc4 <__retarget_lock_acquire_recursive>
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	0719      	lsls	r1, r3, #28
 800082a:	d51d      	bpl.n	8000868 <_puts_r+0x78>
 800082c:	6923      	ldr	r3, [r4, #16]
 800082e:	b1db      	cbz	r3, 8000868 <_puts_r+0x78>
 8000830:	3e01      	subs	r6, #1
 8000832:	68a3      	ldr	r3, [r4, #8]
 8000834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000838:	3b01      	subs	r3, #1
 800083a:	60a3      	str	r3, [r4, #8]
 800083c:	bb39      	cbnz	r1, 800088e <_puts_r+0x9e>
 800083e:	2b00      	cmp	r3, #0
 8000840:	da38      	bge.n	80008b4 <_puts_r+0xc4>
 8000842:	4622      	mov	r2, r4
 8000844:	210a      	movs	r1, #10
 8000846:	4628      	mov	r0, r5
 8000848:	f000 f848 	bl	80008dc <__swbuf_r>
 800084c:	3001      	adds	r0, #1
 800084e:	d011      	beq.n	8000874 <_puts_r+0x84>
 8000850:	250a      	movs	r5, #10
 8000852:	e011      	b.n	8000878 <_puts_r+0x88>
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <_puts_r+0xd4>)
 8000856:	429c      	cmp	r4, r3
 8000858:	d101      	bne.n	800085e <_puts_r+0x6e>
 800085a:	68ac      	ldr	r4, [r5, #8]
 800085c:	e7da      	b.n	8000814 <_puts_r+0x24>
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <_puts_r+0xd8>)
 8000860:	429c      	cmp	r4, r3
 8000862:	bf08      	it	eq
 8000864:	68ec      	ldreq	r4, [r5, #12]
 8000866:	e7d5      	b.n	8000814 <_puts_r+0x24>
 8000868:	4621      	mov	r1, r4
 800086a:	4628      	mov	r0, r5
 800086c:	f000 f888 	bl	8000980 <__swsetup_r>
 8000870:	2800      	cmp	r0, #0
 8000872:	d0dd      	beq.n	8000830 <_puts_r+0x40>
 8000874:	f04f 35ff 	mov.w	r5, #4294967295
 8000878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800087a:	07da      	lsls	r2, r3, #31
 800087c:	d405      	bmi.n	800088a <_puts_r+0x9a>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	059b      	lsls	r3, r3, #22
 8000882:	d402      	bmi.n	800088a <_puts_r+0x9a>
 8000884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000886:	f000 fa9e 	bl	8000dc6 <__retarget_lock_release_recursive>
 800088a:	4628      	mov	r0, r5
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	2b00      	cmp	r3, #0
 8000890:	da04      	bge.n	800089c <_puts_r+0xac>
 8000892:	69a2      	ldr	r2, [r4, #24]
 8000894:	429a      	cmp	r2, r3
 8000896:	dc06      	bgt.n	80008a6 <_puts_r+0xb6>
 8000898:	290a      	cmp	r1, #10
 800089a:	d004      	beq.n	80008a6 <_puts_r+0xb6>
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	6022      	str	r2, [r4, #0]
 80008a2:	7019      	strb	r1, [r3, #0]
 80008a4:	e7c5      	b.n	8000832 <_puts_r+0x42>
 80008a6:	4622      	mov	r2, r4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f817 	bl	80008dc <__swbuf_r>
 80008ae:	3001      	adds	r0, #1
 80008b0:	d1bf      	bne.n	8000832 <_puts_r+0x42>
 80008b2:	e7df      	b.n	8000874 <_puts_r+0x84>
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	250a      	movs	r5, #10
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	6022      	str	r2, [r4, #0]
 80008bc:	701d      	strb	r5, [r3, #0]
 80008be:	e7db      	b.n	8000878 <_puts_r+0x88>
 80008c0:	08001284 	.word	0x08001284
 80008c4:	080012a4 	.word	0x080012a4
 80008c8:	08001264 	.word	0x08001264

080008cc <puts>:
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <puts+0xc>)
 80008ce:	4601      	mov	r1, r0
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	f7ff bf8d 	b.w	80007f0 <_puts_r>
 80008d6:	bf00      	nop
 80008d8:	20000010 	.word	0x20000010

080008dc <__swbuf_r>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	460e      	mov	r6, r1
 80008e0:	4614      	mov	r4, r2
 80008e2:	4605      	mov	r5, r0
 80008e4:	b118      	cbz	r0, 80008ee <__swbuf_r+0x12>
 80008e6:	6983      	ldr	r3, [r0, #24]
 80008e8:	b90b      	cbnz	r3, 80008ee <__swbuf_r+0x12>
 80008ea:	f000 f9cd 	bl	8000c88 <__sinit>
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <__swbuf_r+0x98>)
 80008f0:	429c      	cmp	r4, r3
 80008f2:	d12b      	bne.n	800094c <__swbuf_r+0x70>
 80008f4:	686c      	ldr	r4, [r5, #4]
 80008f6:	69a3      	ldr	r3, [r4, #24]
 80008f8:	60a3      	str	r3, [r4, #8]
 80008fa:	89a3      	ldrh	r3, [r4, #12]
 80008fc:	071a      	lsls	r2, r3, #28
 80008fe:	d52f      	bpl.n	8000960 <__swbuf_r+0x84>
 8000900:	6923      	ldr	r3, [r4, #16]
 8000902:	b36b      	cbz	r3, 8000960 <__swbuf_r+0x84>
 8000904:	6923      	ldr	r3, [r4, #16]
 8000906:	6820      	ldr	r0, [r4, #0]
 8000908:	1ac0      	subs	r0, r0, r3
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	b2f6      	uxtb	r6, r6
 800090e:	4283      	cmp	r3, r0
 8000910:	4637      	mov	r7, r6
 8000912:	dc04      	bgt.n	800091e <__swbuf_r+0x42>
 8000914:	4621      	mov	r1, r4
 8000916:	4628      	mov	r0, r5
 8000918:	f000 f922 	bl	8000b60 <_fflush_r>
 800091c:	bb30      	cbnz	r0, 800096c <__swbuf_r+0x90>
 800091e:	68a3      	ldr	r3, [r4, #8]
 8000920:	3b01      	subs	r3, #1
 8000922:	60a3      	str	r3, [r4, #8]
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	6022      	str	r2, [r4, #0]
 800092a:	701e      	strb	r6, [r3, #0]
 800092c:	6963      	ldr	r3, [r4, #20]
 800092e:	3001      	adds	r0, #1
 8000930:	4283      	cmp	r3, r0
 8000932:	d004      	beq.n	800093e <__swbuf_r+0x62>
 8000934:	89a3      	ldrh	r3, [r4, #12]
 8000936:	07db      	lsls	r3, r3, #31
 8000938:	d506      	bpl.n	8000948 <__swbuf_r+0x6c>
 800093a:	2e0a      	cmp	r6, #10
 800093c:	d104      	bne.n	8000948 <__swbuf_r+0x6c>
 800093e:	4621      	mov	r1, r4
 8000940:	4628      	mov	r0, r5
 8000942:	f000 f90d 	bl	8000b60 <_fflush_r>
 8000946:	b988      	cbnz	r0, 800096c <__swbuf_r+0x90>
 8000948:	4638      	mov	r0, r7
 800094a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <__swbuf_r+0x9c>)
 800094e:	429c      	cmp	r4, r3
 8000950:	d101      	bne.n	8000956 <__swbuf_r+0x7a>
 8000952:	68ac      	ldr	r4, [r5, #8]
 8000954:	e7cf      	b.n	80008f6 <__swbuf_r+0x1a>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <__swbuf_r+0xa0>)
 8000958:	429c      	cmp	r4, r3
 800095a:	bf08      	it	eq
 800095c:	68ec      	ldreq	r4, [r5, #12]
 800095e:	e7ca      	b.n	80008f6 <__swbuf_r+0x1a>
 8000960:	4621      	mov	r1, r4
 8000962:	4628      	mov	r0, r5
 8000964:	f000 f80c 	bl	8000980 <__swsetup_r>
 8000968:	2800      	cmp	r0, #0
 800096a:	d0cb      	beq.n	8000904 <__swbuf_r+0x28>
 800096c:	f04f 37ff 	mov.w	r7, #4294967295
 8000970:	e7ea      	b.n	8000948 <__swbuf_r+0x6c>
 8000972:	bf00      	nop
 8000974:	08001284 	.word	0x08001284
 8000978:	080012a4 	.word	0x080012a4
 800097c:	08001264 	.word	0x08001264

08000980 <__swsetup_r>:
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <__swsetup_r+0xcc>)
 8000982:	b570      	push	{r4, r5, r6, lr}
 8000984:	681d      	ldr	r5, [r3, #0]
 8000986:	4606      	mov	r6, r0
 8000988:	460c      	mov	r4, r1
 800098a:	b125      	cbz	r5, 8000996 <__swsetup_r+0x16>
 800098c:	69ab      	ldr	r3, [r5, #24]
 800098e:	b913      	cbnz	r3, 8000996 <__swsetup_r+0x16>
 8000990:	4628      	mov	r0, r5
 8000992:	f000 f979 	bl	8000c88 <__sinit>
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <__swsetup_r+0xd0>)
 8000998:	429c      	cmp	r4, r3
 800099a:	d10f      	bne.n	80009bc <__swsetup_r+0x3c>
 800099c:	686c      	ldr	r4, [r5, #4]
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009a4:	0719      	lsls	r1, r3, #28
 80009a6:	d42c      	bmi.n	8000a02 <__swsetup_r+0x82>
 80009a8:	06dd      	lsls	r5, r3, #27
 80009aa:	d411      	bmi.n	80009d0 <__swsetup_r+0x50>
 80009ac:	2309      	movs	r3, #9
 80009ae:	6033      	str	r3, [r6, #0]
 80009b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009b4:	81a3      	strh	r3, [r4, #12]
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	e03e      	b.n	8000a3a <__swsetup_r+0xba>
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <__swsetup_r+0xd4>)
 80009be:	429c      	cmp	r4, r3
 80009c0:	d101      	bne.n	80009c6 <__swsetup_r+0x46>
 80009c2:	68ac      	ldr	r4, [r5, #8]
 80009c4:	e7eb      	b.n	800099e <__swsetup_r+0x1e>
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <__swsetup_r+0xd8>)
 80009c8:	429c      	cmp	r4, r3
 80009ca:	bf08      	it	eq
 80009cc:	68ec      	ldreq	r4, [r5, #12]
 80009ce:	e7e6      	b.n	800099e <__swsetup_r+0x1e>
 80009d0:	0758      	lsls	r0, r3, #29
 80009d2:	d512      	bpl.n	80009fa <__swsetup_r+0x7a>
 80009d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d6:	b141      	cbz	r1, 80009ea <__swsetup_r+0x6a>
 80009d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009dc:	4299      	cmp	r1, r3
 80009de:	d002      	beq.n	80009e6 <__swsetup_r+0x66>
 80009e0:	4630      	mov	r0, r6
 80009e2:	f000 fa57 	bl	8000e94 <_free_r>
 80009e6:	2300      	movs	r3, #0
 80009e8:	6363      	str	r3, [r4, #52]	; 0x34
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009f0:	81a3      	strh	r3, [r4, #12]
 80009f2:	2300      	movs	r3, #0
 80009f4:	6063      	str	r3, [r4, #4]
 80009f6:	6923      	ldr	r3, [r4, #16]
 80009f8:	6023      	str	r3, [r4, #0]
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	81a3      	strh	r3, [r4, #12]
 8000a02:	6923      	ldr	r3, [r4, #16]
 8000a04:	b94b      	cbnz	r3, 8000a1a <__swsetup_r+0x9a>
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a10:	d003      	beq.n	8000a1a <__swsetup_r+0x9a>
 8000a12:	4621      	mov	r1, r4
 8000a14:	4630      	mov	r0, r6
 8000a16:	f000 f9fd 	bl	8000e14 <__smakebuf_r>
 8000a1a:	89a0      	ldrh	r0, [r4, #12]
 8000a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a20:	f010 0301 	ands.w	r3, r0, #1
 8000a24:	d00a      	beq.n	8000a3c <__swsetup_r+0xbc>
 8000a26:	2300      	movs	r3, #0
 8000a28:	60a3      	str	r3, [r4, #8]
 8000a2a:	6963      	ldr	r3, [r4, #20]
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	61a3      	str	r3, [r4, #24]
 8000a30:	6923      	ldr	r3, [r4, #16]
 8000a32:	b943      	cbnz	r3, 8000a46 <__swsetup_r+0xc6>
 8000a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a38:	d1ba      	bne.n	80009b0 <__swsetup_r+0x30>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	0781      	lsls	r1, r0, #30
 8000a3e:	bf58      	it	pl
 8000a40:	6963      	ldrpl	r3, [r4, #20]
 8000a42:	60a3      	str	r3, [r4, #8]
 8000a44:	e7f4      	b.n	8000a30 <__swsetup_r+0xb0>
 8000a46:	2000      	movs	r0, #0
 8000a48:	e7f7      	b.n	8000a3a <__swsetup_r+0xba>
 8000a4a:	bf00      	nop
 8000a4c:	20000010 	.word	0x20000010
 8000a50:	08001284 	.word	0x08001284
 8000a54:	080012a4 	.word	0x080012a4
 8000a58:	08001264 	.word	0x08001264

08000a5c <__sflush_r>:
 8000a5c:	898a      	ldrh	r2, [r1, #12]
 8000a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a60:	4605      	mov	r5, r0
 8000a62:	0710      	lsls	r0, r2, #28
 8000a64:	460c      	mov	r4, r1
 8000a66:	d457      	bmi.n	8000b18 <__sflush_r+0xbc>
 8000a68:	684b      	ldr	r3, [r1, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dc04      	bgt.n	8000a78 <__sflush_r+0x1c>
 8000a6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dc01      	bgt.n	8000a78 <__sflush_r+0x1c>
 8000a74:	2000      	movs	r0, #0
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0fa      	beq.n	8000a74 <__sflush_r+0x18>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a84:	682f      	ldr	r7, [r5, #0]
 8000a86:	602b      	str	r3, [r5, #0]
 8000a88:	d032      	beq.n	8000af0 <__sflush_r+0x94>
 8000a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a8c:	89a3      	ldrh	r3, [r4, #12]
 8000a8e:	075a      	lsls	r2, r3, #29
 8000a90:	d505      	bpl.n	8000a9e <__sflush_r+0x42>
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	1ac0      	subs	r0, r0, r3
 8000a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a98:	b10b      	cbz	r3, 8000a9e <__sflush_r+0x42>
 8000a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a9c:	1ac0      	subs	r0, r0, r3
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aa4:	6a21      	ldr	r1, [r4, #32]
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	47b0      	blx	r6
 8000aaa:	1c43      	adds	r3, r0, #1
 8000aac:	89a3      	ldrh	r3, [r4, #12]
 8000aae:	d106      	bne.n	8000abe <__sflush_r+0x62>
 8000ab0:	6829      	ldr	r1, [r5, #0]
 8000ab2:	291d      	cmp	r1, #29
 8000ab4:	d82c      	bhi.n	8000b10 <__sflush_r+0xb4>
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <__sflush_r+0x100>)
 8000ab8:	40ca      	lsrs	r2, r1
 8000aba:	07d6      	lsls	r6, r2, #31
 8000abc:	d528      	bpl.n	8000b10 <__sflush_r+0xb4>
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6062      	str	r2, [r4, #4]
 8000ac2:	04d9      	lsls	r1, r3, #19
 8000ac4:	6922      	ldr	r2, [r4, #16]
 8000ac6:	6022      	str	r2, [r4, #0]
 8000ac8:	d504      	bpl.n	8000ad4 <__sflush_r+0x78>
 8000aca:	1c42      	adds	r2, r0, #1
 8000acc:	d101      	bne.n	8000ad2 <__sflush_r+0x76>
 8000ace:	682b      	ldr	r3, [r5, #0]
 8000ad0:	b903      	cbnz	r3, 8000ad4 <__sflush_r+0x78>
 8000ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8000ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ad6:	602f      	str	r7, [r5, #0]
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	d0cb      	beq.n	8000a74 <__sflush_r+0x18>
 8000adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	d002      	beq.n	8000aea <__sflush_r+0x8e>
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f9d5 	bl	8000e94 <_free_r>
 8000aea:	2000      	movs	r0, #0
 8000aec:	6360      	str	r0, [r4, #52]	; 0x34
 8000aee:	e7c2      	b.n	8000a76 <__sflush_r+0x1a>
 8000af0:	6a21      	ldr	r1, [r4, #32]
 8000af2:	2301      	movs	r3, #1
 8000af4:	4628      	mov	r0, r5
 8000af6:	47b0      	blx	r6
 8000af8:	1c41      	adds	r1, r0, #1
 8000afa:	d1c7      	bne.n	8000a8c <__sflush_r+0x30>
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0c4      	beq.n	8000a8c <__sflush_r+0x30>
 8000b02:	2b1d      	cmp	r3, #29
 8000b04:	d001      	beq.n	8000b0a <__sflush_r+0xae>
 8000b06:	2b16      	cmp	r3, #22
 8000b08:	d101      	bne.n	8000b0e <__sflush_r+0xb2>
 8000b0a:	602f      	str	r7, [r5, #0]
 8000b0c:	e7b2      	b.n	8000a74 <__sflush_r+0x18>
 8000b0e:	89a3      	ldrh	r3, [r4, #12]
 8000b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b14:	81a3      	strh	r3, [r4, #12]
 8000b16:	e7ae      	b.n	8000a76 <__sflush_r+0x1a>
 8000b18:	690f      	ldr	r7, [r1, #16]
 8000b1a:	2f00      	cmp	r7, #0
 8000b1c:	d0aa      	beq.n	8000a74 <__sflush_r+0x18>
 8000b1e:	0793      	lsls	r3, r2, #30
 8000b20:	680e      	ldr	r6, [r1, #0]
 8000b22:	bf08      	it	eq
 8000b24:	694b      	ldreq	r3, [r1, #20]
 8000b26:	600f      	str	r7, [r1, #0]
 8000b28:	bf18      	it	ne
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	1bf6      	subs	r6, r6, r7
 8000b2e:	608b      	str	r3, [r1, #8]
 8000b30:	2e00      	cmp	r6, #0
 8000b32:	dd9f      	ble.n	8000a74 <__sflush_r+0x18>
 8000b34:	6a21      	ldr	r1, [r4, #32]
 8000b36:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b3a:	4633      	mov	r3, r6
 8000b3c:	463a      	mov	r2, r7
 8000b3e:	4628      	mov	r0, r5
 8000b40:	47e0      	blx	ip
 8000b42:	2800      	cmp	r0, #0
 8000b44:	dc06      	bgt.n	8000b54 <__sflush_r+0xf8>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	e790      	b.n	8000a76 <__sflush_r+0x1a>
 8000b54:	4407      	add	r7, r0
 8000b56:	1a36      	subs	r6, r6, r0
 8000b58:	e7ea      	b.n	8000b30 <__sflush_r+0xd4>
 8000b5a:	bf00      	nop
 8000b5c:	20400001 	.word	0x20400001

08000b60 <_fflush_r>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	690b      	ldr	r3, [r1, #16]
 8000b64:	4605      	mov	r5, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	b913      	cbnz	r3, 8000b70 <_fflush_r+0x10>
 8000b6a:	2500      	movs	r5, #0
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
 8000b70:	b118      	cbz	r0, 8000b7a <_fflush_r+0x1a>
 8000b72:	6983      	ldr	r3, [r0, #24]
 8000b74:	b90b      	cbnz	r3, 8000b7a <_fflush_r+0x1a>
 8000b76:	f000 f887 	bl	8000c88 <__sinit>
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <_fflush_r+0x6c>)
 8000b7c:	429c      	cmp	r4, r3
 8000b7e:	d11b      	bne.n	8000bb8 <_fflush_r+0x58>
 8000b80:	686c      	ldr	r4, [r5, #4]
 8000b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0ef      	beq.n	8000b6a <_fflush_r+0xa>
 8000b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b8c:	07d0      	lsls	r0, r2, #31
 8000b8e:	d404      	bmi.n	8000b9a <_fflush_r+0x3a>
 8000b90:	0599      	lsls	r1, r3, #22
 8000b92:	d402      	bmi.n	8000b9a <_fflush_r+0x3a>
 8000b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b96:	f000 f915 	bl	8000dc4 <__retarget_lock_acquire_recursive>
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	f7ff ff5d 	bl	8000a5c <__sflush_r>
 8000ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ba4:	07da      	lsls	r2, r3, #31
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	d4e0      	bmi.n	8000b6c <_fflush_r+0xc>
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	059b      	lsls	r3, r3, #22
 8000bae:	d4dd      	bmi.n	8000b6c <_fflush_r+0xc>
 8000bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bb2:	f000 f908 	bl	8000dc6 <__retarget_lock_release_recursive>
 8000bb6:	e7d9      	b.n	8000b6c <_fflush_r+0xc>
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <_fflush_r+0x70>)
 8000bba:	429c      	cmp	r4, r3
 8000bbc:	d101      	bne.n	8000bc2 <_fflush_r+0x62>
 8000bbe:	68ac      	ldr	r4, [r5, #8]
 8000bc0:	e7df      	b.n	8000b82 <_fflush_r+0x22>
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <_fflush_r+0x74>)
 8000bc4:	429c      	cmp	r4, r3
 8000bc6:	bf08      	it	eq
 8000bc8:	68ec      	ldreq	r4, [r5, #12]
 8000bca:	e7da      	b.n	8000b82 <_fflush_r+0x22>
 8000bcc:	08001284 	.word	0x08001284
 8000bd0:	080012a4 	.word	0x080012a4
 8000bd4:	08001264 	.word	0x08001264

08000bd8 <std>:
 8000bd8:	2300      	movs	r3, #0
 8000bda:	b510      	push	{r4, lr}
 8000bdc:	4604      	mov	r4, r0
 8000bde:	e9c0 3300 	strd	r3, r3, [r0]
 8000be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000be6:	6083      	str	r3, [r0, #8]
 8000be8:	8181      	strh	r1, [r0, #12]
 8000bea:	6643      	str	r3, [r0, #100]	; 0x64
 8000bec:	81c2      	strh	r2, [r0, #14]
 8000bee:	6183      	str	r3, [r0, #24]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	305c      	adds	r0, #92	; 0x5c
 8000bf6:	f7ff fdf3 	bl	80007e0 <memset>
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <std+0x38>)
 8000bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <std+0x3c>)
 8000c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <std+0x40>)
 8000c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <std+0x44>)
 8000c08:	6224      	str	r4, [r4, #32]
 8000c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	bf00      	nop
 8000c10:	08001071 	.word	0x08001071
 8000c14:	08001093 	.word	0x08001093
 8000c18:	080010cb 	.word	0x080010cb
 8000c1c:	080010ef 	.word	0x080010ef

08000c20 <_cleanup_r>:
 8000c20:	4901      	ldr	r1, [pc, #4]	; (8000c28 <_cleanup_r+0x8>)
 8000c22:	f000 b8af 	b.w	8000d84 <_fwalk_reent>
 8000c26:	bf00      	nop
 8000c28:	08000b61 	.word	0x08000b61

08000c2c <__sfmoreglue>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	2268      	movs	r2, #104	; 0x68
 8000c30:	1e4d      	subs	r5, r1, #1
 8000c32:	4355      	muls	r5, r2
 8000c34:	460e      	mov	r6, r1
 8000c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c3a:	f000 f995 	bl	8000f68 <_malloc_r>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	b140      	cbz	r0, 8000c54 <__sfmoreglue+0x28>
 8000c42:	2100      	movs	r1, #0
 8000c44:	e9c0 1600 	strd	r1, r6, [r0]
 8000c48:	300c      	adds	r0, #12
 8000c4a:	60a0      	str	r0, [r4, #8]
 8000c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c50:	f7ff fdc6 	bl	80007e0 <memset>
 8000c54:	4620      	mov	r0, r4
 8000c56:	bd70      	pop	{r4, r5, r6, pc}

08000c58 <__sfp_lock_acquire>:
 8000c58:	4801      	ldr	r0, [pc, #4]	; (8000c60 <__sfp_lock_acquire+0x8>)
 8000c5a:	f000 b8b3 	b.w	8000dc4 <__retarget_lock_acquire_recursive>
 8000c5e:	bf00      	nop
 8000c60:	200000a9 	.word	0x200000a9

08000c64 <__sfp_lock_release>:
 8000c64:	4801      	ldr	r0, [pc, #4]	; (8000c6c <__sfp_lock_release+0x8>)
 8000c66:	f000 b8ae 	b.w	8000dc6 <__retarget_lock_release_recursive>
 8000c6a:	bf00      	nop
 8000c6c:	200000a9 	.word	0x200000a9

08000c70 <__sinit_lock_acquire>:
 8000c70:	4801      	ldr	r0, [pc, #4]	; (8000c78 <__sinit_lock_acquire+0x8>)
 8000c72:	f000 b8a7 	b.w	8000dc4 <__retarget_lock_acquire_recursive>
 8000c76:	bf00      	nop
 8000c78:	200000aa 	.word	0x200000aa

08000c7c <__sinit_lock_release>:
 8000c7c:	4801      	ldr	r0, [pc, #4]	; (8000c84 <__sinit_lock_release+0x8>)
 8000c7e:	f000 b8a2 	b.w	8000dc6 <__retarget_lock_release_recursive>
 8000c82:	bf00      	nop
 8000c84:	200000aa 	.word	0x200000aa

08000c88 <__sinit>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fff0 	bl	8000c70 <__sinit_lock_acquire>
 8000c90:	69a3      	ldr	r3, [r4, #24]
 8000c92:	b11b      	cbz	r3, 8000c9c <__sinit+0x14>
 8000c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c98:	f7ff bff0 	b.w	8000c7c <__sinit_lock_release>
 8000c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <__sinit+0x68>)
 8000ca4:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <__sinit+0x6c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	bf04      	itt	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	61a3      	streq	r3, [r4, #24]
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f000 f820 	bl	8000cf8 <__sfp>
 8000cb8:	6060      	str	r0, [r4, #4]
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 f81c 	bl	8000cf8 <__sfp>
 8000cc0:	60a0      	str	r0, [r4, #8]
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f000 f818 	bl	8000cf8 <__sfp>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60e0      	str	r0, [r4, #12]
 8000ccc:	2104      	movs	r1, #4
 8000cce:	6860      	ldr	r0, [r4, #4]
 8000cd0:	f7ff ff82 	bl	8000bd8 <std>
 8000cd4:	68a0      	ldr	r0, [r4, #8]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2109      	movs	r1, #9
 8000cda:	f7ff ff7d 	bl	8000bd8 <std>
 8000cde:	68e0      	ldr	r0, [r4, #12]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	2112      	movs	r1, #18
 8000ce4:	f7ff ff78 	bl	8000bd8 <std>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61a3      	str	r3, [r4, #24]
 8000cec:	e7d2      	b.n	8000c94 <__sinit+0xc>
 8000cee:	bf00      	nop
 8000cf0:	08001260 	.word	0x08001260
 8000cf4:	08000c21 	.word	0x08000c21

08000cf8 <__sfp>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	4607      	mov	r7, r0
 8000cfc:	f7ff ffac 	bl	8000c58 <__sfp_lock_acquire>
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <__sfp+0x84>)
 8000d02:	681e      	ldr	r6, [r3, #0]
 8000d04:	69b3      	ldr	r3, [r6, #24]
 8000d06:	b913      	cbnz	r3, 8000d0e <__sfp+0x16>
 8000d08:	4630      	mov	r0, r6
 8000d0a:	f7ff ffbd 	bl	8000c88 <__sinit>
 8000d0e:	3648      	adds	r6, #72	; 0x48
 8000d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	d503      	bpl.n	8000d20 <__sfp+0x28>
 8000d18:	6833      	ldr	r3, [r6, #0]
 8000d1a:	b30b      	cbz	r3, 8000d60 <__sfp+0x68>
 8000d1c:	6836      	ldr	r6, [r6, #0]
 8000d1e:	e7f7      	b.n	8000d10 <__sfp+0x18>
 8000d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d24:	b9d5      	cbnz	r5, 8000d5c <__sfp+0x64>
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <__sfp+0x88>)
 8000d28:	60e3      	str	r3, [r4, #12]
 8000d2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8000d30:	f000 f847 	bl	8000dc2 <__retarget_lock_init_recursive>
 8000d34:	f7ff ff96 	bl	8000c64 <__sfp_lock_release>
 8000d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d40:	6025      	str	r5, [r4, #0]
 8000d42:	61a5      	str	r5, [r4, #24]
 8000d44:	2208      	movs	r2, #8
 8000d46:	4629      	mov	r1, r5
 8000d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d4c:	f7ff fd48 	bl	80007e0 <memset>
 8000d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d58:	4620      	mov	r0, r4
 8000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5c:	3468      	adds	r4, #104	; 0x68
 8000d5e:	e7d9      	b.n	8000d14 <__sfp+0x1c>
 8000d60:	2104      	movs	r1, #4
 8000d62:	4638      	mov	r0, r7
 8000d64:	f7ff ff62 	bl	8000c2c <__sfmoreglue>
 8000d68:	4604      	mov	r4, r0
 8000d6a:	6030      	str	r0, [r6, #0]
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d1d5      	bne.n	8000d1c <__sfp+0x24>
 8000d70:	f7ff ff78 	bl	8000c64 <__sfp_lock_release>
 8000d74:	230c      	movs	r3, #12
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	e7ee      	b.n	8000d58 <__sfp+0x60>
 8000d7a:	bf00      	nop
 8000d7c:	08001260 	.word	0x08001260
 8000d80:	ffff0001 	.word	0xffff0001

08000d84 <_fwalk_reent>:
 8000d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4688      	mov	r8, r1
 8000d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d90:	2700      	movs	r7, #0
 8000d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d96:	f1b9 0901 	subs.w	r9, r9, #1
 8000d9a:	d505      	bpl.n	8000da8 <_fwalk_reent+0x24>
 8000d9c:	6824      	ldr	r4, [r4, #0]
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d1f7      	bne.n	8000d92 <_fwalk_reent+0xe>
 8000da2:	4638      	mov	r0, r7
 8000da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000da8:	89ab      	ldrh	r3, [r5, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d907      	bls.n	8000dbe <_fwalk_reent+0x3a>
 8000dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000db2:	3301      	adds	r3, #1
 8000db4:	d003      	beq.n	8000dbe <_fwalk_reent+0x3a>
 8000db6:	4629      	mov	r1, r5
 8000db8:	4630      	mov	r0, r6
 8000dba:	47c0      	blx	r8
 8000dbc:	4307      	orrs	r7, r0
 8000dbe:	3568      	adds	r5, #104	; 0x68
 8000dc0:	e7e9      	b.n	8000d96 <_fwalk_reent+0x12>

08000dc2 <__retarget_lock_init_recursive>:
 8000dc2:	4770      	bx	lr

08000dc4 <__retarget_lock_acquire_recursive>:
 8000dc4:	4770      	bx	lr

08000dc6 <__retarget_lock_release_recursive>:
 8000dc6:	4770      	bx	lr

08000dc8 <__swhatbuf_r>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	460e      	mov	r6, r1
 8000dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd0:	2900      	cmp	r1, #0
 8000dd2:	b096      	sub	sp, #88	; 0x58
 8000dd4:	4614      	mov	r4, r2
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	da08      	bge.n	8000dec <__swhatbuf_r+0x24>
 8000dda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	602a      	str	r2, [r5, #0]
 8000de2:	061a      	lsls	r2, r3, #24
 8000de4:	d410      	bmi.n	8000e08 <__swhatbuf_r+0x40>
 8000de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dea:	e00e      	b.n	8000e0a <__swhatbuf_r+0x42>
 8000dec:	466a      	mov	r2, sp
 8000dee:	f000 f9a5 	bl	800113c <_fstat_r>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	dbf1      	blt.n	8000dda <__swhatbuf_r+0x12>
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e00:	425a      	negs	r2, r3
 8000e02:	415a      	adcs	r2, r3
 8000e04:	602a      	str	r2, [r5, #0]
 8000e06:	e7ee      	b.n	8000de6 <__swhatbuf_r+0x1e>
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	b016      	add	sp, #88	; 0x58
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e14 <__smakebuf_r>:
 8000e14:	898b      	ldrh	r3, [r1, #12]
 8000e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e18:	079d      	lsls	r5, r3, #30
 8000e1a:	4606      	mov	r6, r0
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	d507      	bpl.n	8000e30 <__smakebuf_r+0x1c>
 8000e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	6123      	str	r3, [r4, #16]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	6163      	str	r3, [r4, #20]
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	ab01      	add	r3, sp, #4
 8000e32:	466a      	mov	r2, sp
 8000e34:	f7ff ffc8 	bl	8000dc8 <__swhatbuf_r>
 8000e38:	9900      	ldr	r1, [sp, #0]
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f000 f893 	bl	8000f68 <_malloc_r>
 8000e42:	b948      	cbnz	r0, 8000e58 <__smakebuf_r+0x44>
 8000e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e48:	059a      	lsls	r2, r3, #22
 8000e4a:	d4ef      	bmi.n	8000e2c <__smakebuf_r+0x18>
 8000e4c:	f023 0303 	bic.w	r3, r3, #3
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	81a3      	strh	r3, [r4, #12]
 8000e56:	e7e3      	b.n	8000e20 <__smakebuf_r+0xc>
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <__smakebuf_r+0x7c>)
 8000e5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e5c:	89a3      	ldrh	r3, [r4, #12]
 8000e5e:	6020      	str	r0, [r4, #0]
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	81a3      	strh	r3, [r4, #12]
 8000e66:	9b00      	ldr	r3, [sp, #0]
 8000e68:	6163      	str	r3, [r4, #20]
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	6120      	str	r0, [r4, #16]
 8000e6e:	b15b      	cbz	r3, 8000e88 <__smakebuf_r+0x74>
 8000e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e74:	4630      	mov	r0, r6
 8000e76:	f000 f973 	bl	8001160 <_isatty_r>
 8000e7a:	b128      	cbz	r0, 8000e88 <__smakebuf_r+0x74>
 8000e7c:	89a3      	ldrh	r3, [r4, #12]
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	81a3      	strh	r3, [r4, #12]
 8000e88:	89a0      	ldrh	r0, [r4, #12]
 8000e8a:	4305      	orrs	r5, r0
 8000e8c:	81a5      	strh	r5, [r4, #12]
 8000e8e:	e7cd      	b.n	8000e2c <__smakebuf_r+0x18>
 8000e90:	08000c21 	.word	0x08000c21

08000e94 <_free_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4605      	mov	r5, r0
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	d041      	beq.n	8000f20 <_free_r+0x8c>
 8000e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ea0:	1f0c      	subs	r4, r1, #4
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bfb8      	it	lt
 8000ea6:	18e4      	addlt	r4, r4, r3
 8000ea8:	f000 f97c 	bl	80011a4 <__malloc_lock>
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <_free_r+0x90>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	b933      	cbnz	r3, 8000ec0 <_free_r+0x2c>
 8000eb2:	6063      	str	r3, [r4, #4]
 8000eb4:	6014      	str	r4, [r2, #0]
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ebc:	f000 b978 	b.w	80011b0 <__malloc_unlock>
 8000ec0:	42a3      	cmp	r3, r4
 8000ec2:	d908      	bls.n	8000ed6 <_free_r+0x42>
 8000ec4:	6820      	ldr	r0, [r4, #0]
 8000ec6:	1821      	adds	r1, r4, r0
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	bf01      	itttt	eq
 8000ecc:	6819      	ldreq	r1, [r3, #0]
 8000ece:	685b      	ldreq	r3, [r3, #4]
 8000ed0:	1809      	addeq	r1, r1, r0
 8000ed2:	6021      	streq	r1, [r4, #0]
 8000ed4:	e7ed      	b.n	8000eb2 <_free_r+0x1e>
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	b10b      	cbz	r3, 8000ee0 <_free_r+0x4c>
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d9fa      	bls.n	8000ed6 <_free_r+0x42>
 8000ee0:	6811      	ldr	r1, [r2, #0]
 8000ee2:	1850      	adds	r0, r2, r1
 8000ee4:	42a0      	cmp	r0, r4
 8000ee6:	d10b      	bne.n	8000f00 <_free_r+0x6c>
 8000ee8:	6820      	ldr	r0, [r4, #0]
 8000eea:	4401      	add	r1, r0
 8000eec:	1850      	adds	r0, r2, r1
 8000eee:	4283      	cmp	r3, r0
 8000ef0:	6011      	str	r1, [r2, #0]
 8000ef2:	d1e0      	bne.n	8000eb6 <_free_r+0x22>
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	6053      	str	r3, [r2, #4]
 8000efa:	4401      	add	r1, r0
 8000efc:	6011      	str	r1, [r2, #0]
 8000efe:	e7da      	b.n	8000eb6 <_free_r+0x22>
 8000f00:	d902      	bls.n	8000f08 <_free_r+0x74>
 8000f02:	230c      	movs	r3, #12
 8000f04:	602b      	str	r3, [r5, #0]
 8000f06:	e7d6      	b.n	8000eb6 <_free_r+0x22>
 8000f08:	6820      	ldr	r0, [r4, #0]
 8000f0a:	1821      	adds	r1, r4, r0
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf04      	itt	eq
 8000f10:	6819      	ldreq	r1, [r3, #0]
 8000f12:	685b      	ldreq	r3, [r3, #4]
 8000f14:	6063      	str	r3, [r4, #4]
 8000f16:	bf04      	itt	eq
 8000f18:	1809      	addeq	r1, r1, r0
 8000f1a:	6021      	streq	r1, [r4, #0]
 8000f1c:	6054      	str	r4, [r2, #4]
 8000f1e:	e7ca      	b.n	8000eb6 <_free_r+0x22>
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop
 8000f24:	200000ac 	.word	0x200000ac

08000f28 <sbrk_aligned>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4e0e      	ldr	r6, [pc, #56]	; (8000f64 <sbrk_aligned+0x3c>)
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	6831      	ldr	r1, [r6, #0]
 8000f30:	4605      	mov	r5, r0
 8000f32:	b911      	cbnz	r1, 8000f3a <sbrk_aligned+0x12>
 8000f34:	f000 f88c 	bl	8001050 <_sbrk_r>
 8000f38:	6030      	str	r0, [r6, #0]
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f000 f887 	bl	8001050 <_sbrk_r>
 8000f42:	1c43      	adds	r3, r0, #1
 8000f44:	d00a      	beq.n	8000f5c <sbrk_aligned+0x34>
 8000f46:	1cc4      	adds	r4, r0, #3
 8000f48:	f024 0403 	bic.w	r4, r4, #3
 8000f4c:	42a0      	cmp	r0, r4
 8000f4e:	d007      	beq.n	8000f60 <sbrk_aligned+0x38>
 8000f50:	1a21      	subs	r1, r4, r0
 8000f52:	4628      	mov	r0, r5
 8000f54:	f000 f87c 	bl	8001050 <_sbrk_r>
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d101      	bne.n	8000f60 <sbrk_aligned+0x38>
 8000f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8000f60:	4620      	mov	r0, r4
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	200000b0 	.word	0x200000b0

08000f68 <_malloc_r>:
 8000f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6c:	1ccd      	adds	r5, r1, #3
 8000f6e:	f025 0503 	bic.w	r5, r5, #3
 8000f72:	3508      	adds	r5, #8
 8000f74:	2d0c      	cmp	r5, #12
 8000f76:	bf38      	it	cc
 8000f78:	250c      	movcc	r5, #12
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	4607      	mov	r7, r0
 8000f7e:	db01      	blt.n	8000f84 <_malloc_r+0x1c>
 8000f80:	42a9      	cmp	r1, r5
 8000f82:	d905      	bls.n	8000f90 <_malloc_r+0x28>
 8000f84:	230c      	movs	r3, #12
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	2600      	movs	r6, #0
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f90:	4e2e      	ldr	r6, [pc, #184]	; (800104c <_malloc_r+0xe4>)
 8000f92:	f000 f907 	bl	80011a4 <__malloc_lock>
 8000f96:	6833      	ldr	r3, [r6, #0]
 8000f98:	461c      	mov	r4, r3
 8000f9a:	bb34      	cbnz	r4, 8000fea <_malloc_r+0x82>
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f7ff ffc2 	bl	8000f28 <sbrk_aligned>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	d14d      	bne.n	8001046 <_malloc_r+0xde>
 8000faa:	6834      	ldr	r4, [r6, #0]
 8000fac:	4626      	mov	r6, r4
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d140      	bne.n	8001034 <_malloc_r+0xcc>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	eb04 0803 	add.w	r8, r4, r3
 8000fbc:	f000 f848 	bl	8001050 <_sbrk_r>
 8000fc0:	4580      	cmp	r8, r0
 8000fc2:	d13a      	bne.n	800103a <_malloc_r+0xd2>
 8000fc4:	6821      	ldr	r1, [r4, #0]
 8000fc6:	3503      	adds	r5, #3
 8000fc8:	1a6d      	subs	r5, r5, r1
 8000fca:	f025 0503 	bic.w	r5, r5, #3
 8000fce:	3508      	adds	r5, #8
 8000fd0:	2d0c      	cmp	r5, #12
 8000fd2:	bf38      	it	cc
 8000fd4:	250c      	movcc	r5, #12
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4638      	mov	r0, r7
 8000fda:	f7ff ffa5 	bl	8000f28 <sbrk_aligned>
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d02b      	beq.n	800103a <_malloc_r+0xd2>
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	442b      	add	r3, r5
 8000fe6:	6023      	str	r3, [r4, #0]
 8000fe8:	e00e      	b.n	8001008 <_malloc_r+0xa0>
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	1b52      	subs	r2, r2, r5
 8000fee:	d41e      	bmi.n	800102e <_malloc_r+0xc6>
 8000ff0:	2a0b      	cmp	r2, #11
 8000ff2:	d916      	bls.n	8001022 <_malloc_r+0xba>
 8000ff4:	1961      	adds	r1, r4, r5
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	6025      	str	r5, [r4, #0]
 8000ffa:	bf18      	it	ne
 8000ffc:	6059      	strne	r1, [r3, #4]
 8000ffe:	6863      	ldr	r3, [r4, #4]
 8001000:	bf08      	it	eq
 8001002:	6031      	streq	r1, [r6, #0]
 8001004:	5162      	str	r2, [r4, r5]
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	4638      	mov	r0, r7
 800100a:	f104 060b 	add.w	r6, r4, #11
 800100e:	f000 f8cf 	bl	80011b0 <__malloc_unlock>
 8001012:	f026 0607 	bic.w	r6, r6, #7
 8001016:	1d23      	adds	r3, r4, #4
 8001018:	1af2      	subs	r2, r6, r3
 800101a:	d0b6      	beq.n	8000f8a <_malloc_r+0x22>
 800101c:	1b9b      	subs	r3, r3, r6
 800101e:	50a3      	str	r3, [r4, r2]
 8001020:	e7b3      	b.n	8000f8a <_malloc_r+0x22>
 8001022:	6862      	ldr	r2, [r4, #4]
 8001024:	42a3      	cmp	r3, r4
 8001026:	bf0c      	ite	eq
 8001028:	6032      	streq	r2, [r6, #0]
 800102a:	605a      	strne	r2, [r3, #4]
 800102c:	e7ec      	b.n	8001008 <_malloc_r+0xa0>
 800102e:	4623      	mov	r3, r4
 8001030:	6864      	ldr	r4, [r4, #4]
 8001032:	e7b2      	b.n	8000f9a <_malloc_r+0x32>
 8001034:	4634      	mov	r4, r6
 8001036:	6876      	ldr	r6, [r6, #4]
 8001038:	e7b9      	b.n	8000fae <_malloc_r+0x46>
 800103a:	230c      	movs	r3, #12
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4638      	mov	r0, r7
 8001040:	f000 f8b6 	bl	80011b0 <__malloc_unlock>
 8001044:	e7a1      	b.n	8000f8a <_malloc_r+0x22>
 8001046:	6025      	str	r5, [r4, #0]
 8001048:	e7de      	b.n	8001008 <_malloc_r+0xa0>
 800104a:	bf00      	nop
 800104c:	200000ac 	.word	0x200000ac

08001050 <_sbrk_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d06      	ldr	r5, [pc, #24]	; (800106c <_sbrk_r+0x1c>)
 8001054:	2300      	movs	r3, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	f7ff fb36 	bl	80006cc <_sbrk>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_sbrk_r+0x1a>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_sbrk_r+0x1a>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200000b4 	.word	0x200000b4

08001070 <__sread>:
 8001070:	b510      	push	{r4, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001078:	f000 f8a0 	bl	80011bc <_read_r>
 800107c:	2800      	cmp	r0, #0
 800107e:	bfab      	itete	ge
 8001080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001082:	89a3      	ldrhlt	r3, [r4, #12]
 8001084:	181b      	addge	r3, r3, r0
 8001086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800108a:	bfac      	ite	ge
 800108c:	6563      	strge	r3, [r4, #84]	; 0x54
 800108e:	81a3      	strhlt	r3, [r4, #12]
 8001090:	bd10      	pop	{r4, pc}

08001092 <__swrite>:
 8001092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001096:	461f      	mov	r7, r3
 8001098:	898b      	ldrh	r3, [r1, #12]
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	4605      	mov	r5, r0
 800109e:	460c      	mov	r4, r1
 80010a0:	4616      	mov	r6, r2
 80010a2:	d505      	bpl.n	80010b0 <__swrite+0x1e>
 80010a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a8:	2302      	movs	r3, #2
 80010aa:	2200      	movs	r2, #0
 80010ac:	f000 f868 	bl	8001180 <_lseek_r>
 80010b0:	89a3      	ldrh	r3, [r4, #12]
 80010b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ba:	81a3      	strh	r3, [r4, #12]
 80010bc:	4632      	mov	r2, r6
 80010be:	463b      	mov	r3, r7
 80010c0:	4628      	mov	r0, r5
 80010c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	f000 b817 	b.w	80010f8 <_write_r>

080010ca <__sseek>:
 80010ca:	b510      	push	{r4, lr}
 80010cc:	460c      	mov	r4, r1
 80010ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d2:	f000 f855 	bl	8001180 <_lseek_r>
 80010d6:	1c43      	adds	r3, r0, #1
 80010d8:	89a3      	ldrh	r3, [r4, #12]
 80010da:	bf15      	itete	ne
 80010dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80010de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010e6:	81a3      	strheq	r3, [r4, #12]
 80010e8:	bf18      	it	ne
 80010ea:	81a3      	strhne	r3, [r4, #12]
 80010ec:	bd10      	pop	{r4, pc}

080010ee <__sclose>:
 80010ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f2:	f000 b813 	b.w	800111c <_close_r>
	...

080010f8 <_write_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d07      	ldr	r5, [pc, #28]	; (8001118 <_write_r+0x20>)
 80010fc:	4604      	mov	r4, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	2200      	movs	r2, #0
 8001104:	602a      	str	r2, [r5, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	f7ff fa93 	bl	8000632 <_write>
 800110c:	1c43      	adds	r3, r0, #1
 800110e:	d102      	bne.n	8001116 <_write_r+0x1e>
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	b103      	cbz	r3, 8001116 <_write_r+0x1e>
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	200000b4 	.word	0x200000b4

0800111c <_close_r>:
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4d06      	ldr	r5, [pc, #24]	; (8001138 <_close_r+0x1c>)
 8001120:	2300      	movs	r3, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	602b      	str	r3, [r5, #0]
 8001128:	f7ff fa9f 	bl	800066a <_close>
 800112c:	1c43      	adds	r3, r0, #1
 800112e:	d102      	bne.n	8001136 <_close_r+0x1a>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	b103      	cbz	r3, 8001136 <_close_r+0x1a>
 8001134:	6023      	str	r3, [r4, #0]
 8001136:	bd38      	pop	{r3, r4, r5, pc}
 8001138:	200000b4 	.word	0x200000b4

0800113c <_fstat_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4d07      	ldr	r5, [pc, #28]	; (800115c <_fstat_r+0x20>)
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	4608      	mov	r0, r1
 8001146:	4611      	mov	r1, r2
 8001148:	602b      	str	r3, [r5, #0]
 800114a:	f7ff fa99 	bl	8000680 <_fstat>
 800114e:	1c43      	adds	r3, r0, #1
 8001150:	d102      	bne.n	8001158 <_fstat_r+0x1c>
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	b103      	cbz	r3, 8001158 <_fstat_r+0x1c>
 8001156:	6023      	str	r3, [r4, #0]
 8001158:	bd38      	pop	{r3, r4, r5, pc}
 800115a:	bf00      	nop
 800115c:	200000b4 	.word	0x200000b4

08001160 <_isatty_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4d06      	ldr	r5, [pc, #24]	; (800117c <_isatty_r+0x1c>)
 8001164:	2300      	movs	r3, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	602b      	str	r3, [r5, #0]
 800116c:	f7ff fa97 	bl	800069e <_isatty>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_isatty_r+0x1a>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_isatty_r+0x1a>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	200000b4 	.word	0x200000b4

08001180 <_lseek_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4d07      	ldr	r5, [pc, #28]	; (80011a0 <_lseek_r+0x20>)
 8001184:	4604      	mov	r4, r0
 8001186:	4608      	mov	r0, r1
 8001188:	4611      	mov	r1, r2
 800118a:	2200      	movs	r2, #0
 800118c:	602a      	str	r2, [r5, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f7ff fa8f 	bl	80006b2 <_lseek>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_lseek_r+0x1e>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	b103      	cbz	r3, 800119e <_lseek_r+0x1e>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	200000b4 	.word	0x200000b4

080011a4 <__malloc_lock>:
 80011a4:	4801      	ldr	r0, [pc, #4]	; (80011ac <__malloc_lock+0x8>)
 80011a6:	f7ff be0d 	b.w	8000dc4 <__retarget_lock_acquire_recursive>
 80011aa:	bf00      	nop
 80011ac:	200000a8 	.word	0x200000a8

080011b0 <__malloc_unlock>:
 80011b0:	4801      	ldr	r0, [pc, #4]	; (80011b8 <__malloc_unlock+0x8>)
 80011b2:	f7ff be08 	b.w	8000dc6 <__retarget_lock_release_recursive>
 80011b6:	bf00      	nop
 80011b8:	200000a8 	.word	0x200000a8

080011bc <_read_r>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	4d07      	ldr	r5, [pc, #28]	; (80011dc <_read_r+0x20>)
 80011c0:	4604      	mov	r4, r0
 80011c2:	4608      	mov	r0, r1
 80011c4:	4611      	mov	r1, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	602a      	str	r2, [r5, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f7ff fa14 	bl	80005f8 <_read>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_read_r+0x1e>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	b103      	cbz	r3, 80011da <_read_r+0x1e>
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	200000b4 	.word	0x200000b4

080011e0 <_init>:
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	bf00      	nop
 80011e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e6:	bc08      	pop	{r3}
 80011e8:	469e      	mov	lr, r3
 80011ea:	4770      	bx	lr

080011ec <_fini>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	bf00      	nop
 80011f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f2:	bc08      	pop	{r3}
 80011f4:	469e      	mov	lr, r3
 80011f6:	4770      	bx	lr
