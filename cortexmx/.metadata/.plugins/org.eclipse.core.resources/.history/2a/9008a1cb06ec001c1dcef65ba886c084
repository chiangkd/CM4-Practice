/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void SVC_Handle_c(uint32_t *pBaseStackFrame);

int32_t add_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #36");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;
}
int32_t sub_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #37");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;
}
int32_t mul_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #38");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;
}
int32_t div_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #39");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;
}

int main(void)
{
	int32_t res;

	res = add_numbers(40, -90);	// 40 -> r0, -90 -> r1
	printf("Add result = %ld\n", res);

	res = sub_numbers (25, 150);
	printf("Sub result = %ld\n", res);

	res = mul_numbers (374, 890);
	printf("Mul result = %ld\n", res);

	res = div_numbers (67, -3);
	printf("Div result = %ld\n", res);

	for(;;);
}

__attribute__ ((naked)) void SVC_Handler(void)
{
	__asm("MRS R0,MSP");
	__asm("B SVC_Handler_c");	// Branch to SVC_Handler_c function
}

void SVC_Handler_c(uint32_t *pBaseOfStackFrame)	// Handler code
{
	printf("in SVC handler\n");

	int32_t arg0, arg1, res;

	// How to extract SVC number (#8)
	// 1. get the value of the MSP (There is no 'C' inbuilt function for this, write inline assembly!)
	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];

	// 2. decrement the return address by 2 to point to
	// opcode of the SVC instruction in the program memory
	pReturn_addr -= 2;

	// 3. extract the SVC number (LSByte of the opcode)
	uint8_t svc_number = *pReturn_addr;

	printf("SVC number is : %d\n", svc_number);

	arg0 = pBaseStackFrame[0];	// the value of r0 in stack frame
	arg1 = pBaseStackFrame[1];  // the value of r1 in stack frame

	switch(svc_number)
	{
	case 36:
		res = arg0 + arg1;
		break;
	case 37:
		res = arg0 - arg1;
		break;
	case 38:
		res = arg0 * arg1;
		break;
	case 39:
		res = arg0 / arg1;
		break;
	default:
		printf("invalid svc code\n");
	}

	pBaseOfStackFrame[0] = res;	// send the result back to the thread mode (stack frame first location)
}
