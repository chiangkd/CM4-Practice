/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/* Turn the LED on, need RCC, GPIO mode set*/

#define RCC_AHBENR *(volatile uint32_t *)(0x40021014U)			 // AHB peripheral clock enable register, 0x40021000(RCC base address) + 0x14(offset)
#define GPIOB_MODER *(volatile uint32_t *)(0x48000400U)			 // GPIOB base address(0x48000400) + 0x00(offset)
#define GPIOC_MODER *(volatile uint32_t *)(0x48000800U)			 // GPIOC base address(0x48000800) + 0x00(offset)
#define GPIOB_ODR *(volatile uint32_t *)(0x48000414U)			 // GPIOB base address + 0x14(offset)
#define GPIOC_IDR *(uint32_t const volatile *const)(0x48000810U)

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	/* GPIOB and GPIOC enable */
	RCC_AHBENR |= (1 << 18);	// enable GPIOB
	// RCC_AHBENR |= (1 << 19);	// enable GPIOC

	/* Set GPIOB and GPIOC mode */
	//GPIOB_MODER |= ~(3 << 14);	// clear GPIOB moder7
	GPIOB_MODER |= (1 << 14); 	// set GPIOB moder7 as 01 (output mode)

	// GPIOC_MODER |= ~(3 << 26);	// clear GPIOC moder13 as 00 input mode)

	/* turn LD2 on */
	//GPIOB_ODR |= (1 << 7);		// set GPIO7 to 1 (high)

    /* Loop forever */
	for(;;);
}
