/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	//1. enable all configurable exceptions : usage fault, mem manage fault and bus fault

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= ( 1 << 16); //mem manage
	*pSHCSR |= ( 1 << 17); //bus fault
	*pSHCSR |= ( 1 << 18); //usage fault


	//3. lets force the processor to execute some undefined instruction
	uint32_t *pSRAM = (uint32_t*)0x20010000;

	/*This is an undefined instruction value */
	*pSRAM = 0xFFFFFFFF;

   /* This is a function pointer variable */
	void (*some_address) (void);

   /* initialize  the function pointer variable to some address */
	some_address = (void*)0x20010001;

   /* change PC to jump to location 0x20010000 */
	some_address();

	//4. analyze the fault

	for(;;);
}

// 2. implement the fault handlers

void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);	// hang
}
void MemManage_Handler(void)
{
	printf("Exception : MemManage_Handler\n");
	while(1);	// hang
}
void BusFault_Handler(void)
{
	printf("Exception : BusFault_Handler\n");
	while(1);	// hang
}
void UsageFault_Handler(void)
{
	printf("Exception : UsageFault_Handler\n");
	while(1);	// hang
}

