/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include "main.h"

/* These tasks will be scheduled by our scheduler in round robin fashion */
void task1_handler(void);	// This is task1
void task2_handler(void);	// This is task2
void task3_handler(void);	// This is task3
void task4_handler(void);	// This is task4

void init_systick_timer(uint32_t tick_hz);	// systick conf. function declaration
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);


// global variable to store a PSP values of different task
// is an array of MAX_TASKS
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

// global variable to store different task handler's address
uint32_t task_handlers[MAX_TASKS];


int main(void)
{
	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0

	task_handlers[0] = (uint32_t)task1_handler;
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;

	init_tasks_stack();

	init_systick_timer(TICK_HZ);
	for(;;);
}

void task1_handler(void)
{
	while(1)
	{
		printf("This is task1\n");
	}
}
void task2_handler(void)
{
	while(1)
	{
		printf("This is task2\n");
	}
}
void task3_handler(void)
{
while(1)
	{
		printf("This is task3\n");
	}
}
void task4_handler(void)
{
while(1)
	{
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid

	// load the value in to SVR
	*pSRVR |= count_value;

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
}

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
	__asm volatile("BX LR");	// go back to main function
}



void init_tasks_stack(void)
{
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
	{
		pPSP = (uint32_t*)psp_of_tasks[i];

		/* fully descending */
		pPSP--;	// xPSR
		*pPSP = DUMMY_XPSR;	// 0x00100000

		pPSP--;	// PC
		*pPSP = task_handlers[i];

		pPSP--;	// LR
		*pPSP = 0xFFFFFFFD;

		for(int j = 0; j < 13; j++){
			pPSP--;
			*pPSP = 0; // from R12 to R4
		}

		psp_of_tasks[i] = (uint32_t)pPSP; // preserve the PSP value, very important
	}
}


void SysTick_Handler(void)
{

}


