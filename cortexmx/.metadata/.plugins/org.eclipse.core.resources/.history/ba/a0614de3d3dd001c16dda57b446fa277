/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include <stdio.h>
int main(void)
{
	// 1. enable all configurable exceptions like usage fault, mem manage fault and bus fault
	uint32_t *pSHCRS = (uint32_t*)0xE000ED24;

	*pSHCRS |= ( 1 << 16); // mem manage
	*pSHCRS |= ( 1 << 17); // bus fault
	*pSHCRS |= ( 1 << 18); // usage fault

	// 3. lets force the processor to execute some undefined instruction
	uint32_t *pSRAM = (uint32_t*)0x2000F000;	// this is some random memory location of the SRAM
	*pSRAM = 0xFFFFFFFF;	// invalid instruction (this is an opcode but invalid)

	void (*some_address) (void);

	some_address = (void*)0x2000F000;	// initialize this function pointer to this SRAM location

	some_address();	// dereference this function pointer (This is how to make PC to be load with 0x20010000)

	// 4. analyze the fault


    /* Loop forever */
	for(;;);
}

// 2. implement the fault handlers

void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);	// hang
}
void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);	// hang
}
void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);	// hang
}
void UsageFault_Handler(void)
{
	__asm ("MRS r0, MSP");	// store MSP value in R0
	register uint32_t msp_value __asm("r0");	// not to create this variable in stack instead of use register attribute
	uint32_t *pMSP = (uint32_t*)msp_value;
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	printf("Exception : UsageFault\n");
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF);	// use only the first 16 bits
	printf("MSP = %p\n", pMSP);
	while(1);	// hang
}

