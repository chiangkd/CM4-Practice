/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include "main.h"
#include "led.h"

/* These tasks will be scheduled by our scheduler in round robin fashion */
void task1_handler(void);	// This is task1
void task2_handler(void);	// This is task2
void task3_handler(void);	// This is task3
void task4_handler(void);	// This is task4

void init_systick_timer(uint32_t tick_hz);	// systick conf. function declaration
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);
void init_tasks_stack(void);	// prototype
void enable_processor_faults(void);
__attribute__((naked)) void switch_sp_to_psp(void);

// global variable to store a PSP values of different task
// is an array of MAX_TASKS
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

// global variable to store different task handler's address
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0;	// value = 0 means task1 is running



int main(void)
{

	// we are dealing with stack memory and we may
	// be touching or we may doing some illegal activities related to memory
	// or inline assembly or whatever it could be, or there may be fault while changing from
	// handler to thread mode or something like that.
	// In order to trace the fault!
	enable_processor_faults();

	/* here use MSP as stack pointer by default */

	init_scheduler_stack(SCHED_STACK_START);	// argument no.1 stored in R0

	task_handlers[0] = (uint32_t)task1_handler;
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;

	init_tasks_stack();

	led_init_all();	// initializa all LEDs

	init_systick_timer(TICK_HZ);

	/* before call task1_handler, need to transfer to PSP as stack pointer */
	switch_sp_to_psp();

	task1_handler();

	for(;;);
}

void task1_handler(void)
{
	while(1)
	{
//		printf("This is task1\n");
		led_on(LED_BLUE);
		delay(DELAY_COUNT_1S);
		led_off(LED_BLUE);
		delay(DELAY_COUNT_1S);
	}
}
void task2_handler(void)
{
	while(1)
	{
//		printf("This is task2\n");
		led_on(LED_RED);
		delay(DELAY_COUNT_1S);
		led_off(LED_RED);
		delay(DELAY_COUNT_1S);
	}
}
void task3_handler(void)
{
while(1)
	{
		printf("This is task3\n");
	}
}
void task4_handler(void)
{
while(1)
	{
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;	// SysTick Reload Value Register in generic user guide ch4.4
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;	// remember to minus 1

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);	// only 24 bits are valid

	// load the value in to SVR
	*pSRVR |= count_value;

	// do some settings
	*pSCSR |= (1 << 1); 	// Enables SysTick exception request
	*pSCSR |= (1 << 2); 	// Indicates the clock source, processor clock source

	// enable the setting
	*pSCSR |= (1 << 0);		// Enables the counter
}

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	/* change the value of the MSP */
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  : );
	__asm volatile("BX LR");	// go back to main function
}



void init_tasks_stack(void)
{
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
	{
		pPSP = (uint32_t*)psp_of_tasks[i];

		/* fully descending */
		pPSP--;	// xPSR
		*pPSP = DUMMY_XPSR;	// 0x00100000

		pPSP--;	// PC
		*pPSP = task_handlers[i];

		pPSP--;	// LR
		*pPSP = 0xFFFFFFFD;

		for(int j = 0; j < 13; j++){
			pPSP--;
			*pPSP = 0; // from R12 to R4
		}

		psp_of_tasks[i] = (uint32_t)pPSP; // preserve the PSP value, very important
	}
}

void enable_processor_faults(void)
{
	uint32_t *pSHCRS = (uint32_t*)0xE000ED24;

	*pSHCRS |= ( 1 << 16); // mem manage
	*pSHCRS |= ( 1 << 17); // bus fault
	*pSHCRS |= ( 1 << 18); // usage fault
}


void save_psp_value(uint32_t current_psp_value)
{
	psp_of_tasks[current_task] = current_psp_value;
}

void update_next_task(void)
{
	current_task++;
	current_task %= MAX_TASKS;	// 0 -> 1 -> 2 -> 3 -> 0 ...
}


uint32_t get_psp_value(void)
{
	return psp_of_tasks[current_task];
}


__attribute__((naked)) void switch_sp_to_psp(void)	// change SP to PSP need inline assembly "MRS"
{
	// 1. initializer the PSP with TASK1 stack start

	// get the value of PSP of current_task
	__asm volatile ("PUSH {LR}");	// preserve LR which connects back to main
	__asm volatile ("BL get_psp_value");	// the code will branch to get_psp_value
	__asm volatile ("MSR PSP,R0");	// initialize PSP
	__asm volatile ("POP {LR}");	// pops back LR value

	// 2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");	// use MOV instruction to store some immediate value
	__asm volatile ("MSR CONTROL,R0");	// push R0 to CONTROL register
	__asm volatile ("BX LR");
}

__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task */
	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
	// 2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile ("STMDB R0!,{R4-R11}");

	__asm volatile ("PUSH {LR}");	// save LR value

	// 3. Save the current of PSP
	__asm volatile ("BL save_psp_value");	//LR will going to change here


	/* Retrieve the context of next task */
	// 1. Decide next task to run

	__asm volatile ("BL update_next_task");	//LR will going to change here

	// 2. get its past PSP value
	__asm volatile ("BL get_psp_value");	//LR will going to change here

	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDM R0!, {R4-R11}");

	// 4. update PSP and exit
	__asm volatile ("MSR PSP, R0");

	__asm volatile ("POP {LR}");	// retrieve LR value

	__asm volatile("BX LR");	// write exception exit manually.
}

void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);	// hang
}
void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);	// hang
}
void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);	// hang
}


